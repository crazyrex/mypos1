
'===========================================================
'Code generated by Softlands Solution
'-----------------------------------------------------------
'基本信息, 优惠活动输入
'
'===========================================================
Imports XL.Common
Imports XL.Common.Utils
Imports XL.Win
Imports XL.Win.Utils

Namespace Business


    Public Class B_01_00902  
        Inherits XL.Win.Component.BaseAgent

#Region" 组件设计器生成的代码"

        Public Sub New(ByVal Container As System.ComponentModel.IContainer)
            MyClass.New()

            'Windows.Forms 类撰写设计器支持所必需的
            Container.Add(Me)
        End Sub

        Public Sub New()
            MyBase.New()

            '该调用是组件设计器所必需的。
            InitializeComponent()

            '在 InitializeComponent() 调用之后添加任何初始化

        End Sub


        '组件重写 dispose 以清理组件列表。
        Protected Overloads Overrides Sub Dispose(ByVal disposing As Boolean)
            If disposing Then
                If Not (Components Is Nothing) Then
                    Components.Dispose()
                End If
            End If
            MyBase.Dispose(disposing)
        End Sub

        '组件设计器所必需的
        Private Components As System.ComponentModel.IContainer

        '注意: 以下过程是组件设计器所必需的
        '可以使用组件设计器修改此过程。
        '不要使用代码编辑器修改它。
        <System.Diagnostics.DebuggerStepThrough()> Private Sub InitializeComponent()
            Components = New System.ComponentModel.Container
        End Sub

#End Region


#Region"Prerequested Inits"

        '
        '本代理所对应的表现层实例
        '
        Private _manifest As Manifest.M_01_00902     
        Private _service As MyPosXService.S_01_00902

        Public Enum Affairs
            InitDisplay
            LoadInfo
            SaveInfo
            LoadList
            LoadSaleTemplateInfoByCode
            BizUtld0002
            BizUtld0003
            BizUtld0004
            BizUtld0005
            BizUtld0006
            BizUtld0007
            BizUtld0008
            BizUtld0009
            BizUtld0010
            BizUtld0011
            BizUtld0012
            BizUtld0013
            BizUtld0014
            BizUtld0015
            BizUtld0016
            BizUtld0017
            BizUtld0018
            BizUtld0019
            BizUtld0020
        End Enum

        Public Sub New(ByVal theManifest As XL.Win.Component.BaseForm)
            Me.New()

            Me._manifest = CType(theManifest, Manifest.M_01_00902)

            Try

                Me._service = MyPosXService.S_01_00902.GetInstance()

            Catch ex As Exception

                Window.XLMessageBox.ShowMessage( _
                    ex.Message, _
                    Window.XLMessageBox.MessageType.Wrong, _
                    MessageBoxButtons.OK)

                Me._manifest.Enabled = False

            End Try
        End Sub


        Public ReadOnly Property AffairOf(ByVal affairObject As Object) As Affairs
            Get
                Return CType(affairObject, Affairs)
            End Get
        End Property


        Public Sub SetRequestActionTitle(ByVal action As Affairs, ByVal title As String)

            Me._requestActionTitles(action) = title
        End Sub

        Public Overloads Sub SetDisableControlUnderRequest(ByVal affair As Affairs, ByVal disabledControl As Object)

            MyBase.SetDisableControlUnderRequest(affair, disabledControl)

        End Sub

        Public Overloads Sub EnableControlsUnderRequest(ByVal affair As Affairs)

            MyBase.EnableControlsUnderRequest(affair)

        End Sub

        Public Overloads Sub DisableControlsUnderRequest(ByVal affair As Affairs)

            MyBase.DisableControlsUnderRequest(affair)

        End Sub


        Public Sub DoRequest(ByVal affair As Affairs, ByVal sychronized As Boolean)
            Dim result As New AgentResponse(affair)


            Dim operResult As String
            Dim functionHandle As XL.Win.StringFunctionTransaction = Nothing

            Select Case affair
                Case Affairs.InitDisplay

                    '
                    '取到处理函数的结果，传入返回给Manifest的AgentResponse包
                    '-------------------------------------------------------------------
                    functionHandle = New XL.Win.StringFunctionTransaction(AddressOf Me.DoInitDisplay)

                Case Affairs.LoadInfo

                    '                                                                             
                    '取到处理函数的结果，传入返回给Manifest的AgentResponse包                      
                    '-------------------------------------------------------------------          
                    functionHandle = New XL.Win.StringFunctionTransaction(AddressOf Me.DoLoadInfo)

                Case Affairs.SaveInfo

                    '                                                                             
                    '取到处理函数的结果，传入返回给Manifest的AgentResponse包                      
                    '-------------------------------------------------------------------          
                    functionHandle = New XL.Win.StringFunctionTransaction(AddressOf Me.DoSaveInfo)

                Case Affairs.LoadList

                    '                                                                             
                    '取到处理函数的结果，传入返回给Manifest的AgentResponse包                      
                    '-------------------------------------------------------------------          
                    functionHandle = New XL.Win.StringFunctionTransaction(AddressOf Me.DoLoadList)

                Case Affairs.LoadSaleTemplateInfoByCode

                    '
                    '取到处理函数的结果，传入返回给Manifest的AgentResponse包
                    '-------------------------------------------------------------------
                    functionHandle = New XL.Win.StringFunctionTransaction(AddressOf Me.DoLoadSaleTemplateInfoByCode)

                Case Affairs.BizUtld0002

                    '
                    '取到处理函数的结果，传入返回给Manifest的AgentResponse包
                    '-------------------------------------------------------------------
                    functionHandle = New XL.Win.StringFunctionTransaction(AddressOf Me.DoBizUtld0002)

                Case Affairs.BizUtld0003

                    '
                    '取到处理函数的结果，传入返回给Manifest的AgentResponse包
                    '-------------------------------------------------------------------
                    functionHandle = New XL.Win.StringFunctionTransaction(AddressOf Me.DoBizUtld0003)

                Case Affairs.BizUtld0004

                    '
                    '取到处理函数的结果，传入返回给Manifest的AgentResponse包
                    '-------------------------------------------------------------------
                    functionHandle = New XL.Win.StringFunctionTransaction(AddressOf Me.DoBizUtld0004)

                Case Affairs.BizUtld0005

                    '
                    '取到处理函数的结果，传入返回给Manifest的AgentResponse包
                    '-------------------------------------------------------------------
                    functionHandle = New XL.Win.StringFunctionTransaction(AddressOf Me.DoBizUtld0005)

                Case Affairs.BizUtld0006

                    '
                    '取到处理函数的结果，传入返回给Manifest的AgentResponse包
                    '-------------------------------------------------------------------
                    functionHandle = New XL.Win.StringFunctionTransaction(AddressOf Me.DoBizUtld0006)

                Case Affairs.BizUtld0007

                    '
                    '取到处理函数的结果，传入返回给Manifest的AgentResponse包
                    '-------------------------------------------------------------------
                    functionHandle = New XL.Win.StringFunctionTransaction(AddressOf Me.DoBizUtld0007)

                Case Affairs.BizUtld0008

                    '
                    '取到处理函数的结果，传入返回给Manifest的AgentResponse包
                    '-------------------------------------------------------------------
                    functionHandle = New XL.Win.StringFunctionTransaction(AddressOf Me.DoBizUtld0008)

                Case Affairs.BizUtld0009

                    '
                    '取到处理函数的结果，传入返回给Manifest的AgentResponse包
                    '-------------------------------------------------------------------
                    functionHandle = New XL.Win.StringFunctionTransaction(AddressOf Me.DoBizUtld0009)

                Case Affairs.BizUtld0010

                    '
                    '取到处理函数的结果，传入返回给Manifest的AgentResponse包
                    '-------------------------------------------------------------------
                    functionHandle = New XL.Win.StringFunctionTransaction(AddressOf Me.DoBizUtld0010)

                Case Affairs.BizUtld0011

                    '
                    '取到处理函数的结果，传入返回给Manifest的AgentResponse包
                    '-------------------------------------------------------------------
                    functionHandle = New XL.Win.StringFunctionTransaction(AddressOf Me.DoBizUtld0011)

                Case Affairs.BizUtld0012

                    '
                    '取到处理函数的结果，传入返回给Manifest的AgentResponse包
                    '-------------------------------------------------------------------
                    functionHandle = New XL.Win.StringFunctionTransaction(AddressOf Me.DoBizUtld0012)

                Case Affairs.BizUtld0013

                    '
                    '取到处理函数的结果，传入返回给Manifest的AgentResponse包
                    '-------------------------------------------------------------------
                    functionHandle = New XL.Win.StringFunctionTransaction(AddressOf Me.DoBizUtld0013)

                Case Affairs.BizUtld0014

                    '
                    '取到处理函数的结果，传入返回给Manifest的AgentResponse包
                    '-------------------------------------------------------------------
                    functionHandle = New XL.Win.StringFunctionTransaction(AddressOf Me.DoBizUtld0014)

                Case Affairs.BizUtld0015

                    '
                    '取到处理函数的结果，传入返回给Manifest的AgentResponse包
                    '-------------------------------------------------------------------
                    functionHandle = New XL.Win.StringFunctionTransaction(AddressOf Me.DoBizUtld0015)

                Case Affairs.BizUtld0016

                    '
                    '取到处理函数的结果，传入返回给Manifest的AgentResponse包
                    '-------------------------------------------------------------------
                    functionHandle = New XL.Win.StringFunctionTransaction(AddressOf Me.DoBizUtld0016)

                Case Affairs.BizUtld0017

                    '
                    '取到处理函数的结果，传入返回给Manifest的AgentResponse包
                    '-------------------------------------------------------------------
                    functionHandle = New XL.Win.StringFunctionTransaction(AddressOf Me.DoBizUtld0017)

                Case Affairs.BizUtld0018

                    '
                    '取到处理函数的结果，传入返回给Manifest的AgentResponse包
                    '-------------------------------------------------------------------
                    functionHandle = New XL.Win.StringFunctionTransaction(AddressOf Me.DoBizUtld0018)

                Case Affairs.BizUtld0019

                    '
                    '取到处理函数的结果，传入返回给Manifest的AgentResponse包
                    '-------------------------------------------------------------------
                    functionHandle = New XL.Win.StringFunctionTransaction(AddressOf Me.DoBizUtld0019)

                Case Affairs.BizUtld0020

                    '
                    '取到处理函数的结果，传入返回给Manifest的AgentResponse包
                    '-------------------------------------------------------------------
                    functionHandle = New XL.Win.StringFunctionTransaction(AddressOf Me.DoBizUtld0020)

            End Select

            If XL.Win.Component.BaseAgent.SYCHRONIZED_FORCED = False AndAlso sychronized = False Then

                Me.DisableControlsUnderRequest(affair)
                Me.MountRequestActionTitle(affair)
                functionHandle.BeginInvoke(New AsyncCallback(AddressOf Me.RequestCallback), affair)
                Return

            End If

            operResult = functionHandle.Invoke()

            result.SetValue(WinDecl.RVN_SUCCEED, operResult)

            Me.DoResponse(result)

        End Sub


        Public Sub RequestCallback(ByVal ar As IAsyncResult)

            Dim affair As Affairs = CType(ar.AsyncState, Affairs)
            Dim result As New AgentResponse(affair)

            Dim operResult As String

            Dim aResult As System.Runtime.Remoting.Messaging.AsyncResult = CType(ar, System.Runtime.Remoting.Messaging.AsyncResult)
            Dim functionHandle As XL.Win.StringFunctionTransaction = CType(aResult.AsyncDelegate, StringFunctionTransaction)

            operResult = functionHandle.EndInvoke(ar)

            result.SetValue(WinDecl.RVN_SUCCEED, operResult)
            Me.UnmountRequestActionTitle(affair)

            Me.DoResponse(result)

        End Sub

#End Region

#Region "Transaction Modules"
        '''Function remark:
        '''
        '''
        '''-------------------------------------------------------------------
        Private Function DoInitDisplay() As String


            Try

                MyPosXAuto.Facade.AfBizMaster.FillFT_M_MP_POS( _
                    Nothing, _
                    Me._manifest.SVFT_BINDING_POS_LIST)


                'Dim choosePurchaseWayList As New MyPosXAuto.FTs.FT_CIV_PURCHASE_WAY                                       
                'Dim chooseAssetAbsentTypeList As New MyPosXAuto.FTs.FT_CIV_ASSET_ABSENT_TYPE                              
                'Dim chooseAssetConformationList As New MyPosXAuto.FTs.FT_CIV_ASSET_CONFORMATION                           
                'Dim chooseEliminateWayList As New MyPosXAuto.FTs.FT_CIV_ELIMINATE_WAY                                     
                'Dim chooseInAccountCredenceTextList As New MyPosXAuto.FTs.FT_CIV_IN_ACCOUNT_CREDENCE_TEXT                 
                '                                                                                                     
                'Dim sysManageFormMustConfirm As Boolean                                                              
                '                                                                                                     
                'Me._service.ServInitDisplay( _                                                                       
                '    CommDecl.CURRENT_LANGUAGE_OPTION, _                                                              
                '    choosePurchaseWayList, _                                                                         
                '    chooseAssetAbsentTypeList, _                                                                     
                '    chooseAssetConformationList, _                                                                   
                '    chooseEliminateWayList, _                                                                        
                '    chooseInAccountCredenceTextList, _                                                               
                '    sysManageFormMustConfirm)                                                                        
                '                                                                                                     
                'Me._manifest.LookUpEdit_AssetAbsentType.Properties.DataSource = chooseAssetAbsentTypeList            
                'Me._manifest.LookUpEdit_Conformation.Properties.DataSource = chooseAssetConformationList             
                'Me._manifest.LookUpEdit_EliminateWay.Properties.DataSource = chooseEliminateWayList                  
                'Me._manifest.LookUpEdit_PurchaseWay.Properties.DataSource = choosePurchaseWayList                    
                'Me._manifest.LookUpEdit_InAccountCredenceText.Properties.DataSource = chooseInAccountCredenceTextList
                '                                                                                                     
                'Me._manifest.LookUpEdit_AssetAbsentType.EditValue = XAuto.Decls.CIVALUE_ASSET_ABSENT_TYPE_NONE       
                'Me._manifest.LookUpEdit_EliminateWay.EditValue = MyPosXService.Decls.DEFAULT_CI_ELIMINATE_WAY_VALUE_NONE  
                '                                                                                                     
                'If Me._manifest.SV_EDITING_ASSET_ID < 0 Then                                                         
                '			xxxx                                                                                            
                'End If                                                                                               
                '                                                                                                     
                'If sysManageFormMustConfirm = True Then                                                              
                '    Me._manifest.ButtonEdit_CurrentDepartmentCode.Enabled = False                                    
                'End If                                                                                               


                'Me._manifest.SV_RPTOPT_LABEL = New XForm.ReportOption(MyPosXService.Decls.RPT_NAME_0001, XForm.ReportOption.PrintType.Label, True)
                'Me._manifest.SV_RPTOPT_LABEL.DefaultFileName = SysInfo.ReadLocalSysInfo(XService.Decls.LVN_ASSET_LABEL_FILE_PATH)            

                'Me._manifest.SV_RPTOPT_PRINTER = New XForm.ReportOption(XService.Decls.RPT_NAME_0001, XForm.ReportOption.PrintType.Print, True)
                '                                                                                                                             
                'Me._manifest.SV_RPTOPT_EXCEL = New XForm.ReportOption(XService.Decls.RPT_NAME_0002, XForm.ReportOption.PrintType.Excel, True)


            Catch ex As XL.Common.Utils.XLException

                Dim logContentBuilder As New LineStrBuilder
                logContentBuilder.AppendLine("Message: {0}", ex.Message)
                logContentBuilder.AppendLine("Stack Trace: {0}", ex.StackTrace)

                WinTK.OutputLog("XL Exception", logContentBuilder.ToString())

                Return ex.Message

            Catch ex As Exception

                Dim logContentBuilder As New LineStrBuilder
                logContentBuilder.AppendLine("Message: {0}", ex.Message)
                logContentBuilder.AppendLine("Stack Trace: {0}", ex.StackTrace)

                WinTK.OutputLog("Exception occured", logContentBuilder.ToString())

                XL.Win.Window.XLMessageBox.UseSmallFont = True
                Return ex.Message & vbNewLine & ex.StackTrace.ToString()

            End Try

            Return String.Empty

        End Function

        '''Function remark:                                                         
        '''                                                                         
        '''                                                                         
        '''-------------------------------------------------------------------      
        Private Function DoLoadInfo() As String


            Try

                Dim saleAffairRow As MyPosXAuto.FTs.FT_T_MP_SALE_AFFAIRRow = MyPosXAuto.Facade.AfBizManage.GetT_MP_SALE_AFFAIRRow(Me._manifest.SV_REVISING_AFFAIR_ID)

                If IsNothing(saleAffairRow) = True Then
                    Return String.Empty
                End If

                Me._manifest.TextEdit_AffairName.Text = saleAffairRow.AFFAIR_NAME
                Me._manifest.DateEdit_BeginDate.DateTime = saleAffairRow.BEGIN_DATE
                Me._manifest.DateEdit_BeginDate.DateTime = saleAffairRow.END_DATE
                Me._manifest.SpinEdit_AffairDays.EditValue = saleAffairRow.AFFAIR_DAYS

                Dim templateConditions As New MyPosXAuto.Facade.AfBizManage.ConditionOfT_MP_SALE_TEMPLATE(XL.DB.Utils.ConditionBuilder.LogicOperators.Logic_And)
                templateConditions.Add(MyPosXAuto.Facade.AfBizManage.T_MP_SALE_TEMPLATEColumns.TEMPLATE_IDColumn, "=", saleAffairRow.TEMPLATE_ID)

                Dim templateRowSE As New MyPosXAuto.FTs.FT_T_MP_SALE_TEMPLATERowSEntity

                MyPosXAuto.Facade.AfBizManage.FillT_MP_SALE_TEMPLATERowSEntity(templateRowSE, templateConditions)

                Me._manifest.ButtonEdit_TemplateCode.Text = templateRowSE.TEMPLATE_CODE
                Me._manifest.Label_TemplateName.Text = templateRowSE.TEMPLATE_NAME
                Me._manifest.Label_TemplateID.Text = templateRowSE.TEMPLATE_ID


                Dim affairPosCondition As New MyPosXAuto.Facade.AfBizManage.ConditionOfT_MP_SALE_AFFAIR_POS(XL.DB.Utils.ConditionBuilder.LogicOperators.Logic_And)
                affairPosCondition.Add(MyPosXAuto.Facade.AfBizManage.T_MP_SALE_AFFAIR_POSColumns.AFFAIR_IDColumn, "=", Me._manifest.SV_REVISING_AFFAIR_ID)

                Dim posIDs = MyPosXAuto.Facade.AfBizManage.GetT_MP_SALE_AFFAIR_POS_CVListDistinct( _
                    affairPosCondition, _
                    MyPosXAuto.Facade.AfBizManage.T_MP_SALE_AFFAIR_POSColumns.POS_IDColumn)
                Dim posCondition As New MyPosXAuto.Facade.AfBizMaster.ConditionOfM_MP_POS(XL.DB.Utils.ConditionBuilder.LogicOperators.Logic_And)
                posCondition.Add(MyPosXAuto.Facade.AfBizMaster.M_MP_POSColumns.POS_IDColumn, True, posIDs)

                Me._manifest.SVFT_BINDING_POS_LIST.UnselectAllRows()
                For Each bindingRow As MyPosXAuto.FTs.FT_M_MP_POSRow In Me._manifest.SVFT_BINDING_POS_LIST.FindRowsByCondition(posCondition)
                    bindingRow.ROW_SELECTED = True
                Next

                'Dim servResult As String = _                                       
                '    Me._service.ServLoadInfo()                                     

                'If servResult.Length > 0 Then                                      
                '    Return servResult                                              
                'End If                                                             

            Catch ex As XL.Common.Utils.XLException

                Dim logContentBuilder As New LineStrBuilder
                logContentBuilder.AppendLine("Message: {0}", ex.Message)
                logContentBuilder.AppendLine("Stack Trace: {0}", ex.StackTrace)

                WinTK.OutputLog("XL Exception", logContentBuilder.ToString())

                Return ex.Message

            Catch ex As Exception

                Dim logContentBuilder As New LineStrBuilder
                logContentBuilder.AppendLine("Message: {0}", ex.Message)
                logContentBuilder.AppendLine("Stack Trace: {0}", ex.StackTrace)

                WinTK.OutputLog("Exception occured", logContentBuilder.ToString())

                XL.Win.Window.XLMessageBox.UseSmallFont = True
                Return ex.Message & vbNewLine & ex.StackTrace.ToString()

            End Try

            Return String.Empty

        End Function

        '''Function remark:                                                         
        '''                                                                         
        '''                                                                         
        '''-------------------------------------------------------------------      
        Private Function DoSaveInfo() As String


            Try

                Dim dbAffairPosList As New MyPosXAuto.FTs.FT_T_MP_SALE_AFFAIR_POS

                If MyPosXService.Facade.OpBizManage.ValidatePosAffairConflict( _
                    Me._manifest.SV_REVISING_AFFAIR_ID, _
                    Me._manifest.DateEdit_BeginDate.DateTime, _
                    Me._manifest.DateEdit_BeginDate.DateTime.AddDays(Me._manifest.SpinEdit_AffairDays.Value), _
                    Me._manifest.SVFT_BINDING_POS_LIST) = False Then
                    Return MyPosXService.Decls.MSG_ALERT_00058
                End If

                If Me._manifest.SV_REVISING_AFFAIR_ID = String.Empty Then
                    Dim affairID = Guid.NewGuid.ToString

                    MyPosXAuto.Facade.AfBizManage.CreateT_MP_SALE_AFFAIRInfo( _
                         CommTK.FInteger(Me._manifest.SpinEdit_AffairDays.EditValue), _
                         affairID, _
                         Me._manifest.TextEdit_AffairName.Text, _
                         CommTK.GetBeginOfDate(Me._manifest.DateEdit_BeginDate.DateTime), _
                         CommTK.GetEndOfDate(Me._manifest.DateEdit_BeginDate.DateTime.AddDays(CommTK.FInteger(Me._manifest.SpinEdit_AffairDays.EditValue))), _
                         Me._manifest.Label_TemplateID.Text)

                    For Each bindingRow As MyPosXAuto.FTs.FT_M_MP_POSRow In Me._manifest.SVFT_BINDING_POS_LIST.FindRowsSelecting(True)
                        dbAffairPosList.AddNewT_MP_SALE_AFFAIR_POSRow( _
                            affairID, _
                            Guid.NewGuid.ToString, _
                            bindingRow.POS_ID)
                    Next

                Else

                    MyPosXAuto.Facade.AfBizManage.ReviseT_MP_SALE_AFFAIRInfo( _
                            Me._manifest.SV_REVISING_AFFAIR_ID, _
                            CommTK.FInteger(Me._manifest.SpinEdit_AffairDays.EditValue), _
                            Me._manifest.TextEdit_AffairName.Text, _
                             CommTK.GetBeginOfDate(Me._manifest.DateEdit_BeginDate.DateTime), _
                             CommTK.GetEndOfDate(Me._manifest.DateEdit_BeginDate.DateTime.AddDays(CommTK.FInteger(Me._manifest.SpinEdit_AffairDays.EditValue))), _
                            Me._manifest.Label_TemplateID.Text)

                    Dim posIDs As New ArrayList
                    For Each bindingRow As MyPosXAuto.FTs.FT_M_MP_POSRow In Me._manifest.SVFT_BINDING_POS_LIST.FindRowsSelecting(True)
                        posIDs.Add(bindingRow.POS_ID)
                    Next

                    Dim affairPosCondition As New MyPosXAuto.Facade.AfBizManage.ConditionOfT_MP_SALE_AFFAIR_POS(XL.DB.Utils.ConditionBuilder.LogicOperators.Logic_And)
                    affairPosCondition.Add(MyPosXAuto.Facade.AfBizManage.T_MP_SALE_AFFAIR_POSColumns.AFFAIR_IDColumn, "=", Me._manifest.SV_REVISING_AFFAIR_ID)
                    MyPosXAuto.Facade.AfBizManage.FillFT_T_MP_SALE_AFFAIR_POS(affairPosCondition, dbAffairPosList)

                    For Each posID As String In posIDs

                        affairPosCondition.Clear()
                        affairPosCondition.Add(MyPosXAuto.Facade.AfBizManage.T_MP_SALE_AFFAIR_POSColumns.POS_IDColumn, "=", posID)
                        If dbAffairPosList.FindRowsByCondition(affairPosCondition).Length = 0 Then
                            dbAffairPosList.AddNewT_MP_SALE_AFFAIR_POSRow(Me._manifest.SV_REVISING_AFFAIR_ID, Guid.NewGuid.ToString, posID)
                        End If

                    Next

                    affairPosCondition.Clear()
                    affairPosCondition.Add(MyPosXAuto.Facade.AfBizManage.T_MP_SALE_AFFAIR_POSColumns.POS_IDColumn, False, posIDs)
                    dbAffairPosList.RemoveFT_T_MP_SALE_AFFAIR_POSRows(affairPosCondition)

                End If

                'Dim servResult As String = _                                       
                '    Me._service.ServSaveInfo()                                     

                'If servResult.Length > 0 Then                                      
                '    Return servResult                                              
                'End If                                                             

            Catch ex As XL.Common.Utils.XLException

                Dim logContentBuilder As New LineStrBuilder
                logContentBuilder.AppendLine("Message: {0}", ex.Message)
                logContentBuilder.AppendLine("Stack Trace: {0}", ex.StackTrace)

                WinTK.OutputLog("XL Exception", logContentBuilder.ToString())

                Return ex.Message

            Catch ex As Exception

                Dim logContentBuilder As New LineStrBuilder
                logContentBuilder.AppendLine("Message: {0}", ex.Message)
                logContentBuilder.AppendLine("Stack Trace: {0}", ex.StackTrace)

                WinTK.OutputLog("Exception occured", logContentBuilder.ToString())

                XL.Win.Window.XLMessageBox.UseSmallFont = True
                Return ex.Message & vbNewLine & ex.StackTrace.ToString()

            End Try

            Return String.Empty

        End Function

        '''Function remark:                                                         
        '''                                                                         
        '''                                                                         
        '''-------------------------------------------------------------------      
        Private Function DoLoadList() As String


            Try


                'Dim servResult As String = _                                       
                '    Me._service.ServLoadList()                                     

                'If servResult.Length > 0 Then                                      
                '    Return servResult                                              
                'End If                                                             

            Catch ex As XL.Common.Utils.XLException

                Dim logContentBuilder As New LineStrBuilder
                logContentBuilder.AppendLine("Message: {0}", ex.Message)
                logContentBuilder.AppendLine("Stack Trace: {0}", ex.StackTrace)

                WinTK.OutputLog("XL Exception", logContentBuilder.ToString())

                Return ex.Message

            Catch ex As Exception

                Dim logContentBuilder As New LineStrBuilder
                logContentBuilder.AppendLine("Message: {0}", ex.Message)
                logContentBuilder.AppendLine("Stack Trace: {0}", ex.StackTrace)

                WinTK.OutputLog("Exception occured", logContentBuilder.ToString())

                XL.Win.Window.XLMessageBox.UseSmallFont = True
                Return ex.Message & vbNewLine & ex.StackTrace.ToString()

            End Try

            Return String.Empty

        End Function

        '''Function remark:
        '''
        '''
        '''-------------------------------------------------------------------
        Private Function DoLoadSaleTemplateInfoByCode() As String


            Try

                Dim saleTemplateRowSE As New MyPosXAuto.FTs.FT_T_MP_SALE_TEMPLATERowSEntity

                Dim servResult As String = _
                    Me._service.ServLoadSaleTemplateInfoByCode( _
                        Me._manifest.ButtonEdit_TemplateCode.Text, _
                        saleTemplateRowSE)

                If servResult.Length > 0 Then
                    Return servResult
                End If

                Me._manifest.ButtonEdit_TemplateCode.Text = saleTemplateRowSE.TEMPLATE_CODE
                Me._manifest.Label_TemplateName.Text = saleTemplateRowSE.TEMPLATE_NAME
                Me._manifest.Label_TemplateID.Text = saleTemplateRowSE.TEMPLATE_ID

            Catch ex As XL.Common.Utils.XLException

                Dim logContentBuilder As New LineStrBuilder
                logContentBuilder.AppendLine("Message: {0}", ex.Message)
                logContentBuilder.AppendLine("Stack Trace: {0}", ex.StackTrace)

                WinTK.OutputLog("XL Exception", logContentBuilder.ToString())

                Return ex.Message

            Catch ex As Exception

                Dim logContentBuilder As New LineStrBuilder
                logContentBuilder.AppendLine("Message: {0}", ex.Message)
                logContentBuilder.AppendLine("Stack Trace: {0}", ex.StackTrace)

                WinTK.OutputLog("Exception occured", logContentBuilder.ToString())

                XL.Win.Window.XLMessageBox.UseSmallFont = True
                Return ex.Message & vbNewLine & ex.StackTrace.ToString()

            End Try

            Return String.Empty

        End Function

        '''Function remark:
        '''
        '''
        '''-------------------------------------------------------------------
        Private Function DoBizUtld0002() As String


            Try


                'Dim servResult As String = _
                '    Me._service.ServBizUtld0002()

                'If servResult.Length > 0 Then
                '    Return servResult        
                'End If                       

            Catch ex As XL.Common.Utils.XLException

                Dim logContentBuilder As New LineStrBuilder
                logContentBuilder.AppendLine("Message: {0}", ex.Message)
                logContentBuilder.AppendLine("Stack Trace: {0}", ex.StackTrace)

                WinTK.OutputLog("XL Exception", logContentBuilder.ToString())

                Return ex.Message

            Catch ex As Exception

                Dim logContentBuilder As New LineStrBuilder
                logContentBuilder.AppendLine("Message: {0}", ex.Message)
                logContentBuilder.AppendLine("Stack Trace: {0}", ex.StackTrace)

                WinTK.OutputLog("Exception occured", logContentBuilder.ToString())

                XL.Win.Window.XLMessageBox.UseSmallFont = True
                Return ex.Message & vbNewLine & ex.StackTrace.ToString()

            End Try

            Return String.Empty

        End Function

        '''Function remark:
        '''
        '''
        '''-------------------------------------------------------------------
        Private Function DoBizUtld0003() As String


            Try


                'Dim servResult As String = _
                '    Me._service.ServBizUtld0003()

                'If servResult.Length > 0 Then
                '    Return servResult        
                'End If                       

            Catch ex As XL.Common.Utils.XLException

                Dim logContentBuilder As New LineStrBuilder
                logContentBuilder.AppendLine("Message: {0}", ex.Message)
                logContentBuilder.AppendLine("Stack Trace: {0}", ex.StackTrace)

                WinTK.OutputLog("XL Exception", logContentBuilder.ToString())

                Return ex.Message

            Catch ex As Exception

                Dim logContentBuilder As New LineStrBuilder
                logContentBuilder.AppendLine("Message: {0}", ex.Message)
                logContentBuilder.AppendLine("Stack Trace: {0}", ex.StackTrace)

                WinTK.OutputLog("Exception occured", logContentBuilder.ToString())

                XL.Win.Window.XLMessageBox.UseSmallFont = True
                Return ex.Message & vbNewLine & ex.StackTrace.ToString()

            End Try

            Return String.Empty

        End Function

        '''Function remark:
        '''
        '''
        '''-------------------------------------------------------------------
        Private Function DoBizUtld0004() As String


            Try


                'Dim servResult As String = _
                '    Me._service.ServBizUtld0004()

                'If servResult.Length > 0 Then
                '    Return servResult        
                'End If                       

            Catch ex As XL.Common.Utils.XLException

                Dim logContentBuilder As New LineStrBuilder
                logContentBuilder.AppendLine("Message: {0}", ex.Message)
                logContentBuilder.AppendLine("Stack Trace: {0}", ex.StackTrace)

                WinTK.OutputLog("XL Exception", logContentBuilder.ToString())

                Return ex.Message

            Catch ex As Exception

                Dim logContentBuilder As New LineStrBuilder
                logContentBuilder.AppendLine("Message: {0}", ex.Message)
                logContentBuilder.AppendLine("Stack Trace: {0}", ex.StackTrace)

                WinTK.OutputLog("Exception occured", logContentBuilder.ToString())

                XL.Win.Window.XLMessageBox.UseSmallFont = True
                Return ex.Message & vbNewLine & ex.StackTrace.ToString()

            End Try

            Return String.Empty

        End Function

        '''Function remark:
        '''
        '''
        '''-------------------------------------------------------------------
        Private Function DoBizUtld0005() As String


            Try


                'Dim servResult As String = _
                '    Me._service.ServBizUtld0005()

                'If servResult.Length > 0 Then
                '    Return servResult        
                'End If                       

            Catch ex As XL.Common.Utils.XLException

                Dim logContentBuilder As New LineStrBuilder
                logContentBuilder.AppendLine("Message: {0}", ex.Message)
                logContentBuilder.AppendLine("Stack Trace: {0}", ex.StackTrace)

                WinTK.OutputLog("XL Exception", logContentBuilder.ToString())

                Return ex.Message

            Catch ex As Exception

                Dim logContentBuilder As New LineStrBuilder
                logContentBuilder.AppendLine("Message: {0}", ex.Message)
                logContentBuilder.AppendLine("Stack Trace: {0}", ex.StackTrace)

                WinTK.OutputLog("Exception occured", logContentBuilder.ToString())

                XL.Win.Window.XLMessageBox.UseSmallFont = True
                Return ex.Message & vbNewLine & ex.StackTrace.ToString()

            End Try

            Return String.Empty

        End Function

        '''Function remark:
        '''
        '''
        '''-------------------------------------------------------------------
        Private Function DoBizUtld0006() As String


            Try


                'Dim servResult As String = _
                '    Me._service.ServBizUtld0006()

                'If servResult.Length > 0 Then
                '    Return servResult        
                'End If                       

            Catch ex As XL.Common.Utils.XLException

                Dim logContentBuilder As New LineStrBuilder
                logContentBuilder.AppendLine("Message: {0}", ex.Message)
                logContentBuilder.AppendLine("Stack Trace: {0}", ex.StackTrace)

                WinTK.OutputLog("XL Exception", logContentBuilder.ToString())

                Return ex.Message

            Catch ex As Exception

                Dim logContentBuilder As New LineStrBuilder
                logContentBuilder.AppendLine("Message: {0}", ex.Message)
                logContentBuilder.AppendLine("Stack Trace: {0}", ex.StackTrace)

                WinTK.OutputLog("Exception occured", logContentBuilder.ToString())

                XL.Win.Window.XLMessageBox.UseSmallFont = True
                Return ex.Message & vbNewLine & ex.StackTrace.ToString()

            End Try

            Return String.Empty

        End Function

        '''Function remark:
        '''
        '''
        '''-------------------------------------------------------------------
        Private Function DoBizUtld0007() As String


            Try


                'Dim servResult As String = _
                '    Me._service.ServBizUtld0007()

                'If servResult.Length > 0 Then
                '    Return servResult        
                'End If                       

            Catch ex As XL.Common.Utils.XLException

                Dim logContentBuilder As New LineStrBuilder
                logContentBuilder.AppendLine("Message: {0}", ex.Message)
                logContentBuilder.AppendLine("Stack Trace: {0}", ex.StackTrace)

                WinTK.OutputLog("XL Exception", logContentBuilder.ToString())

                Return ex.Message

            Catch ex As Exception

                Dim logContentBuilder As New LineStrBuilder
                logContentBuilder.AppendLine("Message: {0}", ex.Message)
                logContentBuilder.AppendLine("Stack Trace: {0}", ex.StackTrace)

                WinTK.OutputLog("Exception occured", logContentBuilder.ToString())

                XL.Win.Window.XLMessageBox.UseSmallFont = True
                Return ex.Message & vbNewLine & ex.StackTrace.ToString()

            End Try

            Return String.Empty

        End Function

        '''Function remark:
        '''
        '''
        '''-------------------------------------------------------------------
        Private Function DoBizUtld0008() As String


            Try


                'Dim servResult As String = _
                '    Me._service.ServBizUtld0008()

                'If servResult.Length > 0 Then
                '    Return servResult        
                'End If                       

            Catch ex As XL.Common.Utils.XLException

                Dim logContentBuilder As New LineStrBuilder
                logContentBuilder.AppendLine("Message: {0}", ex.Message)
                logContentBuilder.AppendLine("Stack Trace: {0}", ex.StackTrace)

                WinTK.OutputLog("XL Exception", logContentBuilder.ToString())

                Return ex.Message

            Catch ex As Exception

                Dim logContentBuilder As New LineStrBuilder
                logContentBuilder.AppendLine("Message: {0}", ex.Message)
                logContentBuilder.AppendLine("Stack Trace: {0}", ex.StackTrace)

                WinTK.OutputLog("Exception occured", logContentBuilder.ToString())

                XL.Win.Window.XLMessageBox.UseSmallFont = True
                Return ex.Message & vbNewLine & ex.StackTrace.ToString()

            End Try

            Return String.Empty

        End Function

        '''Function remark:
        '''
        '''
        '''-------------------------------------------------------------------
        Private Function DoBizUtld0009() As String


            Try


                'Dim servResult As String = _
                '    Me._service.ServBizUtld0009()

                'If servResult.Length > 0 Then
                '    Return servResult        
                'End If                       

            Catch ex As XL.Common.Utils.XLException

                Dim logContentBuilder As New LineStrBuilder
                logContentBuilder.AppendLine("Message: {0}", ex.Message)
                logContentBuilder.AppendLine("Stack Trace: {0}", ex.StackTrace)

                WinTK.OutputLog("XL Exception", logContentBuilder.ToString())

                Return ex.Message

            Catch ex As Exception

                Dim logContentBuilder As New LineStrBuilder
                logContentBuilder.AppendLine("Message: {0}", ex.Message)
                logContentBuilder.AppendLine("Stack Trace: {0}", ex.StackTrace)

                WinTK.OutputLog("Exception occured", logContentBuilder.ToString())

                XL.Win.Window.XLMessageBox.UseSmallFont = True
                Return ex.Message & vbNewLine & ex.StackTrace.ToString()

            End Try

            Return String.Empty

        End Function

        '''Function remark:
        '''
        '''
        '''-------------------------------------------------------------------
        Private Function DoBizUtld0010() As String


            Try


                'Dim servResult As String = _
                '    Me._service.ServBizUtld0010()

                'If servResult.Length > 0 Then
                '    Return servResult        
                'End If                       

            Catch ex As XL.Common.Utils.XLException

                Dim logContentBuilder As New LineStrBuilder
                logContentBuilder.AppendLine("Message: {0}", ex.Message)
                logContentBuilder.AppendLine("Stack Trace: {0}", ex.StackTrace)

                WinTK.OutputLog("XL Exception", logContentBuilder.ToString())

                Return ex.Message

            Catch ex As Exception

                Dim logContentBuilder As New LineStrBuilder
                logContentBuilder.AppendLine("Message: {0}", ex.Message)
                logContentBuilder.AppendLine("Stack Trace: {0}", ex.StackTrace)

                WinTK.OutputLog("Exception occured", logContentBuilder.ToString())

                XL.Win.Window.XLMessageBox.UseSmallFont = True
                Return ex.Message & vbNewLine & ex.StackTrace.ToString()

            End Try

            Return String.Empty

        End Function

        '''Function remark:
        '''
        '''
        '''-------------------------------------------------------------------
        Private Function DoBizUtld0011() As String


            Try


                'Dim servResult As String = _
                '    Me._service.ServBizUtld0011()

                'If servResult.Length > 0 Then
                '    Return servResult        
                'End If                       

            Catch ex As XL.Common.Utils.XLException

                Dim logContentBuilder As New LineStrBuilder
                logContentBuilder.AppendLine("Message: {0}", ex.Message)
                logContentBuilder.AppendLine("Stack Trace: {0}", ex.StackTrace)

                WinTK.OutputLog("XL Exception", logContentBuilder.ToString())

                Return ex.Message

            Catch ex As Exception

                Dim logContentBuilder As New LineStrBuilder
                logContentBuilder.AppendLine("Message: {0}", ex.Message)
                logContentBuilder.AppendLine("Stack Trace: {0}", ex.StackTrace)

                WinTK.OutputLog("Exception occured", logContentBuilder.ToString())

                XL.Win.Window.XLMessageBox.UseSmallFont = True
                Return ex.Message & vbNewLine & ex.StackTrace.ToString()

            End Try

            Return String.Empty

        End Function

        '''Function remark:
        '''
        '''
        '''-------------------------------------------------------------------
        Private Function DoBizUtld0012() As String


            Try


                'Dim servResult As String = _
                '    Me._service.ServBizUtld0012()

                'If servResult.Length > 0 Then
                '    Return servResult        
                'End If                       

            Catch ex As XL.Common.Utils.XLException

                Dim logContentBuilder As New LineStrBuilder
                logContentBuilder.AppendLine("Message: {0}", ex.Message)
                logContentBuilder.AppendLine("Stack Trace: {0}", ex.StackTrace)

                WinTK.OutputLog("XL Exception", logContentBuilder.ToString())

                Return ex.Message

            Catch ex As Exception

                Dim logContentBuilder As New LineStrBuilder
                logContentBuilder.AppendLine("Message: {0}", ex.Message)
                logContentBuilder.AppendLine("Stack Trace: {0}", ex.StackTrace)

                WinTK.OutputLog("Exception occured", logContentBuilder.ToString())

                XL.Win.Window.XLMessageBox.UseSmallFont = True
                Return ex.Message & vbNewLine & ex.StackTrace.ToString()

            End Try

            Return String.Empty

        End Function

        '''Function remark:
        '''
        '''
        '''-------------------------------------------------------------------
        Private Function DoBizUtld0013() As String


            Try


                'Dim servResult As String = _
                '    Me._service.ServBizUtld0013()

                'If servResult.Length > 0 Then
                '    Return servResult        
                'End If                       

            Catch ex As XL.Common.Utils.XLException

                Dim logContentBuilder As New LineStrBuilder
                logContentBuilder.AppendLine("Message: {0}", ex.Message)
                logContentBuilder.AppendLine("Stack Trace: {0}", ex.StackTrace)

                WinTK.OutputLog("XL Exception", logContentBuilder.ToString())

                Return ex.Message

            Catch ex As Exception

                Dim logContentBuilder As New LineStrBuilder
                logContentBuilder.AppendLine("Message: {0}", ex.Message)
                logContentBuilder.AppendLine("Stack Trace: {0}", ex.StackTrace)

                WinTK.OutputLog("Exception occured", logContentBuilder.ToString())

                XL.Win.Window.XLMessageBox.UseSmallFont = True
                Return ex.Message & vbNewLine & ex.StackTrace.ToString()

            End Try

            Return String.Empty

        End Function

        '''Function remark:
        '''
        '''
        '''-------------------------------------------------------------------
        Private Function DoBizUtld0014() As String


            Try


                'Dim servResult As String = _
                '    Me._service.ServBizUtld0014()

                'If servResult.Length > 0 Then
                '    Return servResult        
                'End If                       

            Catch ex As XL.Common.Utils.XLException

                Dim logContentBuilder As New LineStrBuilder
                logContentBuilder.AppendLine("Message: {0}", ex.Message)
                logContentBuilder.AppendLine("Stack Trace: {0}", ex.StackTrace)

                WinTK.OutputLog("XL Exception", logContentBuilder.ToString())

                Return ex.Message

            Catch ex As Exception

                Dim logContentBuilder As New LineStrBuilder
                logContentBuilder.AppendLine("Message: {0}", ex.Message)
                logContentBuilder.AppendLine("Stack Trace: {0}", ex.StackTrace)

                WinTK.OutputLog("Exception occured", logContentBuilder.ToString())

                XL.Win.Window.XLMessageBox.UseSmallFont = True
                Return ex.Message & vbNewLine & ex.StackTrace.ToString()

            End Try

            Return String.Empty

        End Function

        '''Function remark:
        '''
        '''
        '''-------------------------------------------------------------------
        Private Function DoBizUtld0015() As String


            Try


                'Dim servResult As String = _
                '    Me._service.ServBizUtld0015()

                'If servResult.Length > 0 Then
                '    Return servResult        
                'End If                       

            Catch ex As XL.Common.Utils.XLException

                Dim logContentBuilder As New LineStrBuilder
                logContentBuilder.AppendLine("Message: {0}", ex.Message)
                logContentBuilder.AppendLine("Stack Trace: {0}", ex.StackTrace)

                WinTK.OutputLog("XL Exception", logContentBuilder.ToString())

                Return ex.Message

            Catch ex As Exception

                Dim logContentBuilder As New LineStrBuilder
                logContentBuilder.AppendLine("Message: {0}", ex.Message)
                logContentBuilder.AppendLine("Stack Trace: {0}", ex.StackTrace)

                WinTK.OutputLog("Exception occured", logContentBuilder.ToString())

                XL.Win.Window.XLMessageBox.UseSmallFont = True
                Return ex.Message & vbNewLine & ex.StackTrace.ToString()

            End Try

            Return String.Empty

        End Function

        '''Function remark:
        '''
        '''
        '''-------------------------------------------------------------------
        Private Function DoBizUtld0016() As String


            Try


                'Dim servResult As String = _
                '    Me._service.ServBizUtld0016()

                'If servResult.Length > 0 Then
                '    Return servResult        
                'End If                       

            Catch ex As XL.Common.Utils.XLException

                Dim logContentBuilder As New LineStrBuilder
                logContentBuilder.AppendLine("Message: {0}", ex.Message)
                logContentBuilder.AppendLine("Stack Trace: {0}", ex.StackTrace)

                WinTK.OutputLog("XL Exception", logContentBuilder.ToString())

                Return ex.Message

            Catch ex As Exception

                Dim logContentBuilder As New LineStrBuilder
                logContentBuilder.AppendLine("Message: {0}", ex.Message)
                logContentBuilder.AppendLine("Stack Trace: {0}", ex.StackTrace)

                WinTK.OutputLog("Exception occured", logContentBuilder.ToString())

                XL.Win.Window.XLMessageBox.UseSmallFont = True
                Return ex.Message & vbNewLine & ex.StackTrace.ToString()

            End Try

            Return String.Empty

        End Function

        '''Function remark:
        '''
        '''
        '''-------------------------------------------------------------------
        Private Function DoBizUtld0017() As String


            Try


                'Dim servResult As String = _
                '    Me._service.ServBizUtld0017()

                'If servResult.Length > 0 Then
                '    Return servResult        
                'End If                       

            Catch ex As XL.Common.Utils.XLException

                Dim logContentBuilder As New LineStrBuilder
                logContentBuilder.AppendLine("Message: {0}", ex.Message)
                logContentBuilder.AppendLine("Stack Trace: {0}", ex.StackTrace)

                WinTK.OutputLog("XL Exception", logContentBuilder.ToString())

                Return ex.Message

            Catch ex As Exception

                Dim logContentBuilder As New LineStrBuilder
                logContentBuilder.AppendLine("Message: {0}", ex.Message)
                logContentBuilder.AppendLine("Stack Trace: {0}", ex.StackTrace)

                WinTK.OutputLog("Exception occured", logContentBuilder.ToString())

                XL.Win.Window.XLMessageBox.UseSmallFont = True
                Return ex.Message & vbNewLine & ex.StackTrace.ToString()

            End Try

            Return String.Empty

        End Function

        '''Function remark:
        '''
        '''
        '''-------------------------------------------------------------------
        Private Function DoBizUtld0018() As String


            Try


                'Dim servResult As String = _
                '    Me._service.ServBizUtld0018()

                'If servResult.Length > 0 Then
                '    Return servResult        
                'End If                       

            Catch ex As XL.Common.Utils.XLException

                Dim logContentBuilder As New LineStrBuilder
                logContentBuilder.AppendLine("Message: {0}", ex.Message)
                logContentBuilder.AppendLine("Stack Trace: {0}", ex.StackTrace)

                WinTK.OutputLog("XL Exception", logContentBuilder.ToString())

                Return ex.Message

            Catch ex As Exception

                Dim logContentBuilder As New LineStrBuilder
                logContentBuilder.AppendLine("Message: {0}", ex.Message)
                logContentBuilder.AppendLine("Stack Trace: {0}", ex.StackTrace)

                WinTK.OutputLog("Exception occured", logContentBuilder.ToString())

                XL.Win.Window.XLMessageBox.UseSmallFont = True
                Return ex.Message & vbNewLine & ex.StackTrace.ToString()

            End Try

            Return String.Empty

        End Function

        '''Function remark:
        '''
        '''
        '''-------------------------------------------------------------------
        Private Function DoBizUtld0019() As String


            Try


                'Dim servResult As String = _
                '    Me._service.ServBizUtld0019()

                'If servResult.Length > 0 Then
                '    Return servResult        
                'End If                       

            Catch ex As XL.Common.Utils.XLException

                Dim logContentBuilder As New LineStrBuilder
                logContentBuilder.AppendLine("Message: {0}", ex.Message)
                logContentBuilder.AppendLine("Stack Trace: {0}", ex.StackTrace)

                WinTK.OutputLog("XL Exception", logContentBuilder.ToString())

                Return ex.Message

            Catch ex As Exception

                Dim logContentBuilder As New LineStrBuilder
                logContentBuilder.AppendLine("Message: {0}", ex.Message)
                logContentBuilder.AppendLine("Stack Trace: {0}", ex.StackTrace)

                WinTK.OutputLog("Exception occured", logContentBuilder.ToString())

                XL.Win.Window.XLMessageBox.UseSmallFont = True
                Return ex.Message & vbNewLine & ex.StackTrace.ToString()

            End Try

            Return String.Empty

        End Function

        '''Function remark:
        '''
        '''
        '''-------------------------------------------------------------------
        Private Function DoBizUtld0020() As String


            Try


                'Dim servResult As String = _
                '    Me._service.ServBizUtld0020()

                'If servResult.Length > 0 Then
                '    Return servResult        
                'End If                       

            Catch ex As XL.Common.Utils.XLException

                Dim logContentBuilder As New LineStrBuilder
                logContentBuilder.AppendLine("Message: {0}", ex.Message)
                logContentBuilder.AppendLine("Stack Trace: {0}", ex.StackTrace)

                WinTK.OutputLog("XL Exception", logContentBuilder.ToString())

                Return ex.Message

            Catch ex As Exception

                Dim logContentBuilder As New LineStrBuilder
                logContentBuilder.AppendLine("Message: {0}", ex.Message)
                logContentBuilder.AppendLine("Stack Trace: {0}", ex.StackTrace)

                WinTK.OutputLog("Exception occured", logContentBuilder.ToString())

                XL.Win.Window.XLMessageBox.UseSmallFont = True
                Return ex.Message & vbNewLine & ex.StackTrace.ToString()

            End Try

            Return String.Empty

        End Function

#End Region


    End Class

End Namespace




'Code Samples Below ------------------------

        ''''Function remark:                                                                                                            
        ''''                                                                                                                            
        ''''                                                                                                                            
        ''''-------------------------------------------------------------------                                                         
        'Private Function DoLoadXXXByCode() As String                                                                                   
        '                                                                                                                               
        '                                                                                                                               
        '    Try                                                                                                                        
        '        If Me._manifest.ButtonEdit_XXXCode.Text.Trim.Length = 0 Then                                                           
        '            Return String.Empty                                                                                                
        '        End If                                                                                                                 
        '                                                                                                                               
        '        Dim SSCondition As New MyPosXAuto.Facade.AfBizMaster.ConditionOfM_SSS(XL.DB.Utils.ConditionBuilder.LogicOperators.Logic_And)
        '        SSCondition.Add(XAuto.Facade.AfBizMaster.M_SSSColumns.SS_CODEColumn, "=", Me._manifest.ButtonEdit_XXXCode.Text)      
        '                                                                                                                               
        '        Dim SSRow As XAuto.FTs.FT_M_SSSRow = _                                                                                 
        '            XAuto.Facade.AfBizMaster.GetM_SSSRow(SSCondition)                                                                  
        '                                                                                                                               
        '        If IsNothing(SSRow) = True Then                                                                                        
        '            Return XService.Decls.MSG_ALERT_00001                                                                              
        '        End If                                                                                                                 
        '                                                                                                                               
        '        Me._manifest.ButtonEdit_XXXCode.Text = SSRow.SS_CODE                                                                   
        '        Me._manifest.Label_XXXName.Text = SSRow.SS_NAME                                                                        
        '        Me._manifest.Label_XXXID.Text = CommTK.FString(SSRow.SS_ID)                                                            
        '                                                                                                                               
        '        'Dim servResult As String = _                                                                                          
        '        '    Me._service.ServLoadXXXByCode()                                                                                   
        '                                                                                                                               
        '        'If servResult.Length > 0 Then                                                                                         
        '        '    Return servResult                                                                                                 
        '        'End If                                                                                                                
        '                                                                                                                               
        '    Catch ex As XL.Common.Utils.XLException                                                                                    
        '                                                                                                                               
        '        Dim logContentBuilder As New LineStrBuilder                                                                            
        '        logContentBuilder.AppendLine("Message: {0}", ex.Message)                                                           
        '        logContentBuilder.AppendLine("Stack Trace: {0}", ex.StackTrace)                                                    
        '                                                                                                                               
        '        WinTK.OutputLog("XL Exception", logContentBuilder.ToString())                                                        
        '                                                                                                                               
        '        Return ex.Message                                                                                                      
        '                                                                                                                               
        '    Catch ex As Exception                                                                                                      
        '                                                                                                                               
        '        Dim logContentBuilder As New LineStrBuilder                                                                            
        '        logContentBuilder.AppendLine("Message: {0}", ex.Message)                                                           
        '        logContentBuilder.AppendLine("Stack Trace: {0}", ex.StackTrace)                                                    
        '                                                                                                                               
        '        WinTK.OutputLog("Exception occured", logContentBuilder.ToString())                                                   
        '                                                                                                                               
        '        XL.Win.Window.XLMessageBox.UseSmallFont = True                                                                         
        '        Return ex.Message & vbNewLine & ex.StackTrace.ToString()                                                               
        '                                                                                                                               
        '    End Try                                                                                                                    
        '                                                                                                                               
        '    Return String.Empty                                                                                                        
        '                                                                                                                               
        'End Function                                                                                                                   


