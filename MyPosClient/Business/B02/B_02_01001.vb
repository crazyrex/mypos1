
'===========================================================
'Code generated by Softlands Solution
'-----------------------------------------------------------
'业务操作, 零售简单操作
'
'===========================================================
Imports XL.Common
Imports XL.Common.Utils
Imports XL.Win
Imports XL.Win.Utils

Namespace Business


    Public Class B_02_01001
        Inherits XL.Win.Component.BaseAgent

#Region " 组件设计器生成的代码"

        Public Sub New(ByVal Container As System.ComponentModel.IContainer)
            MyClass.New()

            'Windows.Forms 类撰写设计器支持所必需的
            Container.Add(Me)
        End Sub

        Public Sub New()
            MyBase.New()

            '该调用是组件设计器所必需的。
            InitializeComponent()

            '在 InitializeComponent() 调用之后添加任何初始化

        End Sub


        '组件重写 dispose 以清理组件列表。
        Protected Overloads Overrides Sub Dispose(ByVal disposing As Boolean)
            If disposing Then
                If Not (Components Is Nothing) Then
                    Components.Dispose()
                End If
            End If
            MyBase.Dispose(disposing)
        End Sub

        '组件设计器所必需的
        Private Components As System.ComponentModel.IContainer

        '注意: 以下过程是组件设计器所必需的
        '可以使用组件设计器修改此过程。
        '不要使用代码编辑器修改它。
        <System.Diagnostics.DebuggerStepThrough()> Private Sub InitializeComponent()
            Components = New System.ComponentModel.Container
        End Sub

#End Region


#Region "Prerequested Inits"

        '
        '本代理所对应的表现层实例
        '
        Private _manifest As Manifest.M_02_01001
        Private _service As MyPosXService.S_02_01001

        Public Enum Affairs
            InitDisplay
            LoadInfo
            SaveInfo
            LoadList
            AddWare
            UpdateSummary
            LoadClientInfoByCode
            UpdateChange
            UploadCacheData
            PrintPurchaseList
            LoadReturnReliefTurnover
            BizUtld0008
            BizUtld0009
            BizUtld0010
            BizUtld0011
            BizUtld0012
            BizUtld0013
            BizUtld0014
            BizUtld0015
            BizUtld0016
            BizUtld0017
            BizUtld0018
            BizUtld0019
            BizUtld0020
        End Enum

        Public Sub New(ByVal theManifest As XL.Win.Component.BaseForm)
            Me.New()

            Me._manifest = CType(theManifest, Manifest.M_02_01001)

            Try

                Me._service = MyPosXService.S_02_01001.GetInstance()

            Catch ex As Exception

                Window.XLMessageBox.ShowMessage( _
                    ex.Message, _
                    Window.XLMessageBox.MessageType.Wrong, _
                    MessageBoxButtons.OK)

                Me._manifest.Enabled = False

            End Try
        End Sub


        Public ReadOnly Property AffairOf(ByVal affairObject As Object) As Affairs
            Get
                Return CType(affairObject, Affairs)
            End Get
        End Property


        Public Sub SetRequestActionTitle(ByVal action As Affairs, ByVal title As String)

            Me._requestActionTitles(action) = title
        End Sub

        Public Overloads Sub SetDisableControlUnderRequest(ByVal affair As Affairs, ByVal disabledControl As Object)

            MyBase.SetDisableControlUnderRequest(affair, disabledControl)

        End Sub

        Public Overloads Sub EnableControlsUnderRequest(ByVal affair As Affairs)

            MyBase.EnableControlsUnderRequest(affair)

        End Sub

        Public Overloads Sub DisableControlsUnderRequest(ByVal affair As Affairs)

            MyBase.DisableControlsUnderRequest(affair)

        End Sub


        Public Sub DoRequest(ByVal affair As Affairs, ByVal sychronized As Boolean)
            Dim result As New AgentResponse(affair)


            Dim operResult As String
            Dim functionHandle As XL.Win.StringFunctionTransaction = Nothing

            Select Case affair
                Case Affairs.InitDisplay

                    '
                    '取到处理函数的结果，传入返回给Manifest的AgentResponse包
                    '-------------------------------------------------------------------
                    functionHandle = New XL.Win.StringFunctionTransaction(AddressOf Me.DoInitDisplay)

                Case Affairs.LoadInfo

                    '                                                                             
                    '取到处理函数的结果，传入返回给Manifest的AgentResponse包                      
                    '-------------------------------------------------------------------          
                    functionHandle = New XL.Win.StringFunctionTransaction(AddressOf Me.DoLoadInfo)

                Case Affairs.SaveInfo

                    '                                                                             
                    '取到处理函数的结果，传入返回给Manifest的AgentResponse包                      
                    '-------------------------------------------------------------------          
                    functionHandle = New XL.Win.StringFunctionTransaction(AddressOf Me.DoSaveInfo)

                Case Affairs.LoadList

                    '                                                                             
                    '取到处理函数的结果，传入返回给Manifest的AgentResponse包                      
                    '-------------------------------------------------------------------          
                    functionHandle = New XL.Win.StringFunctionTransaction(AddressOf Me.DoLoadList)

                Case Affairs.AddWare

                    '
                    '取到处理函数的结果，传入返回给Manifest的AgentResponse包
                    '-------------------------------------------------------------------
                    functionHandle = New XL.Win.StringFunctionTransaction(AddressOf Me.DoAddWare)

                Case Affairs.UpdateSummary

                    '
                    '取到处理函数的结果，传入返回给Manifest的AgentResponse包
                    '-------------------------------------------------------------------
                    functionHandle = New XL.Win.StringFunctionTransaction(AddressOf Me.DoUpdateSummary)

                Case Affairs.LoadClientInfoByCode

                    '
                    '取到处理函数的结果，传入返回给Manifest的AgentResponse包
                    '-------------------------------------------------------------------
                    functionHandle = New XL.Win.StringFunctionTransaction(AddressOf Me.DoLoadClientInfoByCode)

                Case Affairs.UpdateChange

                    '
                    '取到处理函数的结果，传入返回给Manifest的AgentResponse包
                    '-------------------------------------------------------------------
                    functionHandle = New XL.Win.StringFunctionTransaction(AddressOf Me.DoUpdateChange)

                Case Affairs.UploadCacheData

                    '
                    '取到处理函数的结果，传入返回给Manifest的AgentResponse包
                    '-------------------------------------------------------------------
                    functionHandle = New XL.Win.StringFunctionTransaction(AddressOf Me.DoUploadCacheData)

                Case Affairs.PrintPurchaseList

                    '
                    '取到处理函数的结果，传入返回给Manifest的AgentResponse包
                    '-------------------------------------------------------------------
                    functionHandle = New XL.Win.StringFunctionTransaction(AddressOf Me.DoPrintPurchaseList)

                Case Affairs.LoadReturnReliefTurnover

                    '
                    '取到处理函数的结果，传入返回给Manifest的AgentResponse包
                    '-------------------------------------------------------------------
                    functionHandle = New XL.Win.StringFunctionTransaction(AddressOf Me.DoLoadReturnReliefTurnover)

                Case Affairs.BizUtld0008

                    '
                    '取到处理函数的结果，传入返回给Manifest的AgentResponse包
                    '-------------------------------------------------------------------
                    functionHandle = New XL.Win.StringFunctionTransaction(AddressOf Me.DoBizUtld0008)

                Case Affairs.BizUtld0009

                    '
                    '取到处理函数的结果，传入返回给Manifest的AgentResponse包
                    '-------------------------------------------------------------------
                    functionHandle = New XL.Win.StringFunctionTransaction(AddressOf Me.DoBizUtld0009)

                Case Affairs.BizUtld0010

                    '
                    '取到处理函数的结果，传入返回给Manifest的AgentResponse包
                    '-------------------------------------------------------------------
                    functionHandle = New XL.Win.StringFunctionTransaction(AddressOf Me.DoBizUtld0010)

                Case Affairs.BizUtld0011

                    '
                    '取到处理函数的结果，传入返回给Manifest的AgentResponse包
                    '-------------------------------------------------------------------
                    functionHandle = New XL.Win.StringFunctionTransaction(AddressOf Me.DoBizUtld0011)

                Case Affairs.BizUtld0012

                    '
                    '取到处理函数的结果，传入返回给Manifest的AgentResponse包
                    '-------------------------------------------------------------------
                    functionHandle = New XL.Win.StringFunctionTransaction(AddressOf Me.DoBizUtld0012)

                Case Affairs.BizUtld0013

                    '
                    '取到处理函数的结果，传入返回给Manifest的AgentResponse包
                    '-------------------------------------------------------------------
                    functionHandle = New XL.Win.StringFunctionTransaction(AddressOf Me.DoBizUtld0013)

                Case Affairs.BizUtld0014

                    '
                    '取到处理函数的结果，传入返回给Manifest的AgentResponse包
                    '-------------------------------------------------------------------
                    functionHandle = New XL.Win.StringFunctionTransaction(AddressOf Me.DoBizUtld0014)

                Case Affairs.BizUtld0015

                    '
                    '取到处理函数的结果，传入返回给Manifest的AgentResponse包
                    '-------------------------------------------------------------------
                    functionHandle = New XL.Win.StringFunctionTransaction(AddressOf Me.DoBizUtld0015)

                Case Affairs.BizUtld0016

                    '
                    '取到处理函数的结果，传入返回给Manifest的AgentResponse包
                    '-------------------------------------------------------------------
                    functionHandle = New XL.Win.StringFunctionTransaction(AddressOf Me.DoBizUtld0016)

                Case Affairs.BizUtld0017

                    '
                    '取到处理函数的结果，传入返回给Manifest的AgentResponse包
                    '-------------------------------------------------------------------
                    functionHandle = New XL.Win.StringFunctionTransaction(AddressOf Me.DoBizUtld0017)

                Case Affairs.BizUtld0018

                    '
                    '取到处理函数的结果，传入返回给Manifest的AgentResponse包
                    '-------------------------------------------------------------------
                    functionHandle = New XL.Win.StringFunctionTransaction(AddressOf Me.DoBizUtld0018)

                Case Affairs.BizUtld0019

                    '
                    '取到处理函数的结果，传入返回给Manifest的AgentResponse包
                    '-------------------------------------------------------------------
                    functionHandle = New XL.Win.StringFunctionTransaction(AddressOf Me.DoBizUtld0019)

                Case Affairs.BizUtld0020

                    '
                    '取到处理函数的结果，传入返回给Manifest的AgentResponse包
                    '-------------------------------------------------------------------
                    functionHandle = New XL.Win.StringFunctionTransaction(AddressOf Me.DoBizUtld0020)

            End Select

            If XL.Win.Component.BaseAgent.SYCHRONIZED_FORCED = False AndAlso sychronized = False Then

                Me.DisableControlsUnderRequest(affair)
                Me.MountRequestActionTitle(affair)
                functionHandle.BeginInvoke(New AsyncCallback(AddressOf Me.RequestCallback), affair)
                Return

            End If

            operResult = functionHandle.Invoke()

            result.SetValue(WinDecl.RVN_SUCCEED, operResult)

            Me.DoResponse(result)

        End Sub


        Public Sub RequestCallback(ByVal ar As IAsyncResult)

            Dim affair As Affairs = CType(ar.AsyncState, Affairs)
            Dim result As New AgentResponse(affair)

            Dim operResult As String

            Dim aResult As System.Runtime.Remoting.Messaging.AsyncResult = CType(ar, System.Runtime.Remoting.Messaging.AsyncResult)
            Dim functionHandle As XL.Win.StringFunctionTransaction = CType(aResult.AsyncDelegate, StringFunctionTransaction)

            operResult = functionHandle.EndInvoke(ar)

            result.SetValue(WinDecl.RVN_SUCCEED, operResult)
            Me.UnmountRequestActionTitle(affair)

            Me.DoResponse(result)

        End Sub

#End Region

#Region "Transaction Modules"
        '''Function remark:
        '''
        '''
        '''-------------------------------------------------------------------
        Private Function DoInitDisplay() As String


            Try


                Dim staffRowSE As New MyPosXAuto.FTs.FT_M_STAFFRowSEntity

                Dim sysWareSpecModelDiscard As Boolean
                Dim sysHideFinancials As Boolean
                Dim sysShowCustomWareCode As Boolean
                Dim affairDescription As String = String.Empty

                Dim sysAttribute1 As String = String.Empty
                Dim sysAttribute2 As String = String.Empty
                Dim sysAttribute3 As String = String.Empty
                Dim sysAttribute4 As String = String.Empty

                Dim wareBatchPrefix As String = String.Empty

                Me._service.ServInitDisplay( _
                    CommDecl.CURRENT_LANGUAGE_OPTION, _
                    Utils.Decls.LOGIN_STAFF_ID, _
                    staffRowSE, _
                    sysWareSpecModelDiscard, _
                    sysHideFinancials, _
                    sysShowCustomWareCode, _
                    sysAttribute1, _
                    sysAttribute2, _
                    sysAttribute3, _
                    sysAttribute4, _
                    affairDescription, _
                    SysInfo.ReadLocalSysInfo(MyPosXService.Decls.LVN_CURRENT_POS_ID), _
                    Me._manifest.SV_POS_SET_ROWSE, _
                    Me._manifest.SVFT_REF_SALE_TEMPLATE_WARE_LIST)

                If staffRowSE.IsNull = False Then
                    'Me._manifest.ButtonEdit_EmployeeCode.Text = staffRowSE.STAFF_CODE
                    'Me._manifest.Label_EmployeeName.Text = staffRowSE.STAFF_NAME
                    'Me._manifest.Label_EmployeeID.Text = CommTK.FString(staffRowSE.STAFF_ID)
                End If

                Me._manifest.SV_REPORT_TURNOVER_DTL_LIST = New XForm.ReportOption(MyPosXService.Decls.RPT_NAME_0001, XForm.ReportOption.PrintType.Print, True)

                'If CommTK.FBoolean(SysInfo.ReadLocalSysInfo(MyPosXService.Decls.LVN_PRINT_SHOPPING_LIST)) = True  Then
                '    Me._manifest.ToolStripButton_PrintPurchaseLabel.Visible = False
                'End If

                If sysHideFinancials = True Then
                    Me._manifest.ShowStatusMessage(StatusMessageIcon.Alert, MyPosXService.Decls.MSG_STATUS_0005)
                End If

                Me._manifest.GridColumn_Attribute1.Caption = sysAttribute1
                Me._manifest.GridColumn_Attribute2.Caption = sysAttribute2
                Me._manifest.GridColumn_Attribute3.Caption = sysAttribute3
                Me._manifest.GridColumn_Attribute4.Caption = sysAttribute4

                If sysAttribute1.Length = 0 Then
                    Me._manifest.GridColumn_Attribute1.Visible = False
                End If

                If sysAttribute2.Length = 0 Then
                    Me._manifest.GridColumn_Attribute2.Visible = False
                End If

                If sysAttribute3.Length = 0 Then
                    Me._manifest.GridColumn_Attribute3.Visible = False
                End If

                If sysAttribute4.Length = 0 Then
                    Me._manifest.GridColumn_Attribute4.Visible = False
                End If

                If sysWareSpecModelDiscard = True Then
                    Me._manifest.GridColumn_Spec.Visible = False
                    Me._manifest.GridColumn_Model.Visible = False
                End If

                If sysShowCustomWareCode = False Then
                    Me._manifest.GridColumn_CustomCode.Visible = False
                End If

                Dim userCostHidden As Boolean = CommTK.FBoolean(SysInfo.LoginUserOptions.Options("OPN_COST_HIDDEN"))
                Dim userPriceHidden As Boolean = CommTK.FBoolean(SysInfo.LoginUserOptions.Options("OPN_PRICE_HIDDEN"))

                If userPriceHidden = True Then
                    Me._manifest.GridColumn_UnitPrice.Visible = False
                    Me._manifest.GridColumn_SumPrice.Visible = False
                End If

                Me._manifest.Label_AffairDescription.Text = affairDescription

                If Utils.Decls.LOGIN_STAFF_ID.Length = 0 Then
                    Me._manifest.ShowStatusMessage(StatusMessageIcon.Alert, MyPosXService.Decls.MSG_STATUS_0013)
                    Me._manifest.DoPublicDisableOperations()
                    Return String.Empty
                End If

                If Me._manifest.SV_POS_SET_ROWSE.POS_TYPE = MyPosXAuto.Decls.CIVALUE_POS_TYPE_WAREHOUSE Then
                    Me._manifest.ShowStatusMessage(StatusMessageIcon.Alert, MyPosXService.Decls.MSG_STATUS_0014)
                    Me._manifest.DoPublicDisableOperations()
                    Return String.Empty
                End If

                Me._manifest.SVFT_CACHE_DATA_TURNOVER_LIST.LoadXml( _
                    WinTK.GetResourceFilePath( _
                        ResourceType.Data, _
                        Utils.Decls.CACHE_DATA_FILE_TURNOVER))
                Me._manifest.SVFT_CACHE_DATE_TURNOVER_DTL_LIST.LoadXml( _
                    WinTK.GetResourceFilePath( _
                        ResourceType.Data, _
                        Utils.Decls.CACHE_DATA_FILE_TURNOVER_DETAIL))




            Catch ex As XL.Common.Utils.XLException

                Dim logContentBuilder As New LineStrBuilder
                logContentBuilder.AppendLine("Message: {0}", ex.Message)
                logContentBuilder.AppendLine("Stack Trace: {0}", ex.StackTrace)

                WinTK.OutputLog("XL Exception", logContentBuilder.ToString())

                Return ex.Message

            Catch ex As Exception

                Dim logContentBuilder As New LineStrBuilder
                logContentBuilder.AppendLine("Message: {0}", ex.Message)
                logContentBuilder.AppendLine("Stack Trace: {0}", ex.StackTrace)

                WinTK.OutputLog("Exception occured", logContentBuilder.ToString())

                XL.Win.Window.XLMessageBox.UseSmallFont = True
                Return ex.Message & vbNewLine & ex.StackTrace.ToString()

            End Try

            Return String.Empty

        End Function

        '''Function remark:                                                         
        '''                                                                         
        '''                                                                         
        '''-------------------------------------------------------------------      
        Private Function DoLoadInfo() As String


            Try


                'Dim servResult As String = _                                       
                '    Me._service.ServLoadInfo()                                     

                'If servResult.Length > 0 Then                                      
                '    Return servResult                                              
                'End If                                                             

            Catch ex As XL.Common.Utils.XLException

                Dim logContentBuilder As New LineStrBuilder
                logContentBuilder.AppendLine("Message: {0}", ex.Message)
                logContentBuilder.AppendLine("Stack Trace: {0}", ex.StackTrace)

                WinTK.OutputLog("XL Exception", logContentBuilder.ToString())

                Return ex.Message

            Catch ex As Exception

                Dim logContentBuilder As New LineStrBuilder
                logContentBuilder.AppendLine("Message: {0}", ex.Message)
                logContentBuilder.AppendLine("Stack Trace: {0}", ex.StackTrace)

                WinTK.OutputLog("Exception occured", logContentBuilder.ToString())

                XL.Win.Window.XLMessageBox.UseSmallFont = True
                Return ex.Message & vbNewLine & ex.StackTrace.ToString()

            End Try

            Return String.Empty

        End Function

        '''Function remark:                                                         
        '''                                                                         
        '''                                                                         
        '''-------------------------------------------------------------------      
        Private Function DoSaveInfo() As String


            Try

                Dim turnoverType As Integer = MyPosXAuto.Decls.CIVALUE_TURNOVER_TYPE_CHECK_OUT
                Dim turnoverStyle As Integer = MyPosXAuto.Decls.CIVALUE_TURNOVER_STYLE_SOLD
                Dim pointGain As Integer = CommTK.FInteger(Me._manifest.Label_AquiringPoints.Text)
                Dim pointUse As Integer = CommTK.FInteger(Me._manifest.CalcEdit_UsePoint.Value)
                Dim extraDiscount As Decimal = Me._manifest.CalcEdit_ExtraDiscount.Value

                If Me._manifest.SV_RETURN_RELIEF_TURNOVER_ROW_SE.IsNull = False Then
                    turnoverType = MyPosXAuto.Decls.CIVALUE_TURNOVER_TYPE_CHECK_IN
                    turnoverStyle = MyPosXAuto.Decls.CIVALUE_TURNOVER_STYLE_RETURNS
                    pointGain = -pointGain
                    pointUse = -pointUse
                    extraDiscount = -extraDiscount

                    Dim turnoverDtlCondition As New MyPosXAuto.Facade.AfXV.ConditionOfXV_H_MP_TURNOVER_DTL(XL.DB.Utils.ConditionBuilder.LogicOperators.Logic_And)
                    turnoverDtlCondition.Add(MyPosXAuto.Facade.AfXV.XV_H_MP_TURNOVER_DTLColumns.WARE_AMOUNTColumn, "=", 0)
                    Me._manifest.SVFT_BINDING_TURNOVER_DTL_LIST.RemoveFT_XV_H_MP_TURNOVER_DTLRows(turnoverDtlCondition)

                End If

                If Me._manifest.SV_IS_DB_ONLINE = True Then

                    Me._manifest.SV_PRINTING_TURNOVER_CODE = MyPosXService.Facade.OpBizTurnover.GetAutoTransferCode( _
                        False, _
                        SysInfo.ReadLocalSysInfo(MyPosXService.Decls.LVN_CURRENT_POS_ID), _
                         MyPosXAuto.Decls.CIVALUE_TURNOVER_STYLE_SOLD)
                    Dim turnoverID = Guid.NewGuid.ToString
                    MyPosXAuto.Facade.AfBizTurnover.CreateH_MP_TURNOVERInfo( _
                        TURNOVER_ID:=turnoverID, _
                        TURNOVER_CODE:=Me._manifest.SV_PRINTING_TURNOVER_CODE, _
                        TURNOVER_TIME:=CommTK.GetSyncServerTime, _
                        POS_ID:=SysInfo.ReadLocalSysInfo(MyPosXService.Decls.LVN_CURRENT_POS_ID), _
                        STAFF_ID:=Utils.Decls.LOGIN_STAFF_ID, _
                        TURNOVER_TYPE:=turnoverType, _
                        TURNOVER_STYLE:=turnoverStyle, _
                        SUPPLIER_ID:=String.Empty, _
                        CLIENT_ID:=Me._manifest.Label_ClientID.Text, _
                        TURNOVER_CONSIGN_STATUS:=MyPosXAuto.Decls.CIVALUE_TURNOVER_CONSIGN_STATUS_DONE, _
                        BALANCE_STATUS:=MyPosXAuto.Decls.CIVALUE_BALANCE_STATUS_DONE, _
                        REMARK:=String.Empty, _
                        DELIVERY_DETAIL:=String.Empty, _
                        EXTRA_DISCOUNT:=extraDiscount, _
                        DELIVERY_CHARGE:=0, _
                        RELIEF_PAIR_ID:=Me._manifest.SV_RETURN_RELIEF_TURNOVER_ROW_SE.TURNOVER_ID, _
                        STAFF_SHARE_RATE:=0, _
                        CONSIGN_DUE_DATE:=CommTK.GetSyncServerTime, _
                        BATCH_INDEX:=0, _
                        HEADQUATER_MERGED_CODE:=String.Empty, _
                        REPLACE_INVENTORY_ID:=String.Empty, _
                        POINT_GAIN:=pointGain, _
                        POINT_TO_RMB_RATE:=CommTK.FDecimal(SysInfo.ReadShareSysInfo(MyPosXService.Decls.SVN_POINTS_TO_RMB_RATE)), _
                        POINT_USE:=pointUse, _
                        RMB_TO_POINT_RATE:=CommTK.FDecimal(SysInfo.ReadShareSysInfo(MyPosXService.Decls.SVN_RMB_TO_POINTS_RATE)))

                    For Each bindingRow As MyPosXAuto.FTs.FT_XV_H_MP_TURNOVER_DTLRow In Me._manifest.SVFT_BINDING_TURNOVER_DTL_LIST
                        bindingRow.DETAIL_ID = Guid.NewGuid.ToString
                        bindingRow.TURNOVER_ID = turnoverID
                    Next

                    MyPosXAuto.Facade.AfBizTurnover.SaveBatchH_MP_TURNOVER_DTLData( _
                        Me._manifest.SVFT_BINDING_TURNOVER_DTL_LIST)
                    Return String.Empty
                End If

                Dim turnoverCacheDataRow = Me._manifest.SVFT_CACHE_DATA_TURNOVER_LIST.AddNewXV_H_MP_TURNOVERRow( _
                    TURNOVER_ID:=Guid.NewGuid.ToString, _
                    TURNOVER_CODE:=MyPosXService.Facade.OpBizTurnover.GetAutoLocalTurnoverCode(False, turnoverType, SysInfo.ReadLocalSysInfo(MyPosXService.Decls.LVN_CURRENT_POS_ID)), _
                    TURNOVER_TIME:=CommTK.GetSyncServerTime, _
                    POS_ID:=SysInfo.ReadLocalSysInfo(MyPosXService.Decls.LVN_CURRENT_POS_ID), _
                    STAFF_ID:=Utils.Decls.LOGIN_STAFF_ID, _
                    TURNOVER_TYPE:=turnoverType, _
                    TURNOVER_STYLE:=turnoverStyle, _
                    SUPPLIER_ID:=String.Empty, _
                    CLIENT_ID:=Me._manifest.Label_ClientID.Text, _
                    TURNOVER_CONSIGN_STATUS:=MyPosXAuto.Decls.CIVALUE_TURNOVER_CONSIGN_STATUS_DONE, _
                    BALANCE_STATUS:=MyPosXAuto.Decls.CIVALUE_BALANCE_STATUS_DONE, _
                    REMARK:=String.Empty, _
                    DELIVERY_DETAIL:=String.Empty, _
                    EXTRA_DISCOUNT:=extraDiscount, _
                    DELIVERY_CHARGE:=0, _
                    RELIEF_PAIR_ID:=Me._manifest.SV_RETURN_RELIEF_TURNOVER_ROW_SE.TURNOVER_ID, _
                    STAFF_SHARE_RATE:=0, _
                    CONSIGN_DUE_DATE:=CommTK.GetSyncServerTime, _
                    BATCH_INDEX:=0, _
                    HEADQUATER_MERGED_CODE:=String.Empty, _
                    REPLACE_INVENTORY_ID:=String.Empty, _
                    ADDRESS:=String.Empty, _
                    BALANCE_STATUS_TEXT:=String.Empty, _
                    BRANCH_TO_POS_ENCODE:=String.Empty, _
                    CELL_PHONE:=String.Empty, _
                    CITY:=String.Empty, _
                    COUNTRY:=String.Empty, _
                    DEPARTMENT:=String.Empty, _
                    EMAIL:=String.Empty, _
                    FAX:=String.Empty, _
                    HOME_PHONE:=String.Empty, _
                    M_STAFF_EMAIL:=String.Empty, _
                    POS_ADDRESS:=String.Empty, _
                    POS_CODE:=String.Empty, _
                    POS_NAME:=String.Empty, _
                    POST_CODE:=String.Empty, _
                    POS_SET_ID:=String.Empty, _
                    REMARKS:=String.Empty, _
                    STAFF_CODE:=String.Empty, _
                    STAFF_NAME:=String.Empty, _
                    STATE:=String.Empty, _
                    TITLE:=String.Empty, _
                    TURNOVER_CONSIGN_STATUS_TEXT:=String.Empty, _
                    TURNOVER_STYLE_TEXT:=String.Empty, _
                    TURNOVER_TYPE_TEXT:=String.Empty, _
                    WORK_PHONE:=String.Empty, _
                    POINT_GAIN:=pointGain, _
                    POINT_TO_RMB_RATE:=CommTK.FDecimal(SysInfo.ReadShareSysInfo(MyPosXService.Decls.SVN_POINTS_TO_RMB_RATE)), _
                    POINT_USE:=pointUse, _
                    RMB_TO_POINT_RATE:=CommTK.FDecimal(SysInfo.ReadShareSysInfo(MyPosXService.Decls.SVN_RMB_TO_POINTS_RATE)))

                Dim turnoverDtlCacheDataRow As MyPosXAuto.FTs.FT_XV_H_MP_TURNOVER_DTLRow
                For Each bindingRow As MyPosXAuto.FTs.FT_XV_H_MP_TURNOVER_DTLRow In Me._manifest.SVFT_BINDING_TURNOVER_DTL_LIST

                    turnoverDtlCacheDataRow = Me._manifest.SVFT_CACHE_DATE_TURNOVER_DTL_LIST.NewXV_H_MP_TURNOVER_DTLRow()
                    Me._manifest.SVFT_CACHE_DATE_TURNOVER_DTL_LIST.AddXV_H_MP_TURNOVER_DTLRow(turnoverDtlCacheDataRow)

                    turnoverDtlCacheDataRow.CloneDataRow(bindingRow)
                    turnoverDtlCacheDataRow.DETAIL_ID = Guid.NewGuid.ToString
                    turnoverDtlCacheDataRow.TURNOVER_ID = turnoverCacheDataRow.TURNOVER_ID
                Next


                Me._manifest.SVFT_CACHE_DATA_TURNOVER_LIST.SaveXml( _
                    WinTK.GetResourceFilePath( _
                        ResourceType.Data, _
                        Utils.Decls.CACHE_DATA_FILE_TURNOVER))
                Me._manifest.SVFT_CACHE_DATE_TURNOVER_DTL_LIST.SaveXml( _
                    WinTK.GetResourceFilePath( _
                        ResourceType.Data, _
                        Utils.Decls.CACHE_DATA_FILE_TURNOVER_DETAIL))


                'Dim servResult As String = _                                       
                '    Me._service.ServSaveInfo()                                     

                'If servResult.Length > 0 Then                                      
                '    Return servResult                                              
                'End If       


            Catch ex As XL.Common.Utils.XLException

                Dim logContentBuilder As New LineStrBuilder
                logContentBuilder.AppendLine("Message: {0}", ex.Message)
                logContentBuilder.AppendLine("Stack Trace: {0}", ex.StackTrace)

                WinTK.OutputLog("XL Exception", logContentBuilder.ToString())

                Return ex.Message

            Catch ex As Exception

                Dim logContentBuilder As New LineStrBuilder
                logContentBuilder.AppendLine("Message: {0}", ex.Message)
                logContentBuilder.AppendLine("Stack Trace: {0}", ex.StackTrace)

                WinTK.OutputLog("Exception occured", logContentBuilder.ToString())

                XL.Win.Window.XLMessageBox.UseSmallFont = True
                Return ex.Message & vbNewLine & ex.StackTrace.ToString()

            End Try

            Return String.Empty

        End Function

        '''Function remark:                                                         
        '''                                                                         
        '''                                                                         
        '''-------------------------------------------------------------------      
        Private Function DoLoadList() As String


            Try


                'Dim servResult As String = _                                       
                '    Me._service.ServLoadList()                                     

                'If servResult.Length > 0 Then                                      
                '    Return servResult                                              
                'End If                                                             

            Catch ex As XL.Common.Utils.XLException

                Dim logContentBuilder As New LineStrBuilder
                logContentBuilder.AppendLine("Message: {0}", ex.Message)
                logContentBuilder.AppendLine("Stack Trace: {0}", ex.StackTrace)

                WinTK.OutputLog("XL Exception", logContentBuilder.ToString())

                Return ex.Message

            Catch ex As Exception

                Dim logContentBuilder As New LineStrBuilder
                logContentBuilder.AppendLine("Message: {0}", ex.Message)
                logContentBuilder.AppendLine("Stack Trace: {0}", ex.StackTrace)

                WinTK.OutputLog("Exception occured", logContentBuilder.ToString())

                XL.Win.Window.XLMessageBox.UseSmallFont = True
                Return ex.Message & vbNewLine & ex.StackTrace.ToString()

            End Try

            Return String.Empty

        End Function

        '''Function remark:
        '''
        '''
        '''-------------------------------------------------------------------
        Private Function DoAddWare() As String


            Try

                Dim wareCondition As New MyPosXAuto.Facade.AfBizMaster.ConditionOfM_MP_WARE(XL.DB.Utils.ConditionBuilder.LogicOperators.Logic_And)
                wareCondition.Add(MyPosXAuto.Facade.AfBizMaster.M_MP_WAREColumns.WARE_CODEColumn, "=", Me._manifest.ButtonEdit_WareCode.Text)

                Dim wareRowSEntity As New MyPosXAuto.FTs.FT_M_MP_WARERowSEntity
                MyPosXAuto.Facade.AfBizMaster.FillM_MP_WARERowSEntity(wareRowSEntity, wareCondition)

                If wareRowSEntity.IsNull = True Then
                    WinTK.PlayWavSound("Error.wmv")
                    Me._manifest.ShowStatusMessage(StatusMessageIcon.Alert, MyPosXService.Decls.MSG_STATUS_0023)
                    Return String.Empty
                End If

                Me._manifest.ButtonEdit_WareCode.Text = wareRowSEntity.WARE_CODE
                Me._manifest.Label_WareID.Text = wareRowSEntity.WARE_ID
                Me._manifest.Label_WareInfo.Text = _
                    MyPosXService.Facade.OpBizMaster.GetWareInfoString( _
                        wareRowSEntity.WARE_ID, _
                        SysInfo.ReadLocalSysInfo(MyPosXService.Decls.LVN_CURRENT_POS_ID), _
                        False)

                Dim dtlCondition As New MyPosXAuto.Facade.AfXV.ConditionOfXV_H_MP_TURNOVER_DTL(XL.DB.Utils.ConditionBuilder.LogicOperators.Logic_And)
                dtlCondition.Add(MyPosXAuto.Facade.AfXV.XV_H_MP_TURNOVER_DTLColumns.WARE_CODEColumn, "=", Me._manifest.ButtonEdit_WareCode.Text)

                Dim dtlRow = Me._manifest.SVFT_BINDING_TURNOVER_DTL_LIST.FindRowByCondition(dtlCondition)
                If IsNothing(dtlRow) = True Then
                    dtlRow = Me._manifest.SVFT_BINDING_TURNOVER_DTL_LIST.NewXV_H_MP_TURNOVER_DTLRow()
                    Me._manifest.SVFT_BINDING_TURNOVER_DTL_LIST.AddXV_H_MP_TURNOVER_DTLRow(dtlRow)
                    dtlRow.WARE_ID = wareRowSEntity.WARE_ID
                    dtlRow.WARE_CODE = wareRowSEntity.WARE_CODE
                    dtlRow.WARE_NAME = wareRowSEntity.WARE_NAME
                    dtlRow.SPEC = wareRowSEntity.SPEC
                    dtlRow.SPEC_EN = wareRowSEntity.SPEC_EN
                    dtlRow.MODEL = wareRowSEntity.MODEL
                    dtlRow.MODEL_EN = wareRowSEntity.MODEL_EN
                    dtlRow.ATTRIBUTE1 = wareRowSEntity.ATTRIBUTE1
                    dtlRow.ATTRIBUTE2 = wareRowSEntity.ATTRIBUTE2
                    dtlRow.ATTRIBUTE3 = wareRowSEntity.ATTRIBUTE3
                    dtlRow.ATTRIBUTE4 = wareRowSEntity.ATTRIBUTE4
                    dtlRow.TURNOVER_BOOK_STATUS = MyPosXAuto.Decls.CIVALUE_TURNOVER_BOOK_STATUS_ON_HAND
                End If

                dtlRow.UNIT_PRICE = wareRowSEntity.UNIT_PRICE

                dtlRow.WARE_AMOUNT += 1
                Dim saleTemplateWareCondition As New MyPosXAuto.Facade.AfXV.ConditionOfXV_T_MP_SALE_TEMPLATE_WARE(XL.DB.Utils.ConditionBuilder.LogicOperators.Logic_And)
                saleTemplateWareCondition.Add(MyPosXAuto.Facade.AfXV.XV_T_MP_SALE_TEMPLATE_WAREColumns.WARE_IDColumn, "=", wareRowSEntity.WARE_ID)

                Dim saleTemplateWareRow = Me._manifest.SVFT_REF_SALE_TEMPLATE_WARE_LIST.FindRowByCondition(saleTemplateWareCondition)
                If IsNothing(saleTemplateWareRow) = False Then
                    dtlRow.UNIT_DISCOUNT = Utils.TK.CalcWareSaleUnitDiscount(dtlRow.UNIT_PRICE, saleTemplateWareRow)
                    dtlRow.UNIT_PRICE -= dtlRow.UNIT_DISCOUNT
                End If

                dtlRow.ORIGION_UNIT_PRICE = dtlRow.UNIT_PRICE + dtlRow.UNIT_DISCOUNT

                dtlRow.SUM_PRICE = CommTK.FDecimal(dtlRow.UNIT_PRICE * dtlRow.WARE_AMOUNT)
                dtlRow.SUM_DISCOUNT = CommTK.FDecimal(dtlRow.UNIT_DISCOUNT * dtlRow.WARE_AMOUNT)
                dtlRow.ORIGION_SUM_PRICE = dtlRow.SUM_PRICE + dtlRow.SUM_DISCOUNT
                Me._manifest.SpinEdit_WareAmount.Value = dtlRow.WARE_AMOUNT

                'Dim servResult As String = _
                '    Me._service.ServAddWare()

                'If servResult.Length > 0 Then
                '    Return servResult        
                'End If                       

            Catch ex As XL.Common.Utils.XLException

                Dim logContentBuilder As New LineStrBuilder
                logContentBuilder.AppendLine("Message: {0}", ex.Message)
                logContentBuilder.AppendLine("Stack Trace: {0}", ex.StackTrace)

                WinTK.OutputLog("XL Exception", logContentBuilder.ToString())

                Return ex.Message

            Catch ex As Exception

                Dim logContentBuilder As New LineStrBuilder
                logContentBuilder.AppendLine("Message: {0}", ex.Message)
                logContentBuilder.AppendLine("Stack Trace: {0}", ex.StackTrace)

                WinTK.OutputLog("Exception occured", logContentBuilder.ToString())

                XL.Win.Window.XLMessageBox.UseSmallFont = True
                Return ex.Message & vbNewLine & ex.StackTrace.ToString()

            End Try

            Return String.Empty

        End Function

        '''Function remark:
        '''
        '''
        '''-------------------------------------------------------------------
        Private Function DoUpdateSummary() As String


            Try

                Dim totalPrice = CommTK.FDecimal(Me._manifest.SVFT_BINDING_TURNOVER_DTL_LIST.Compute("Sum(SUM_PRICE)", String.Empty))
                Me._manifest.Label_TotalPrice.Text = _
                    CommTK.FString(totalPrice, _
                    False, _
                    "#,##0.00")

                Dim totalDiscount = CommTK.FDecimal(Me._manifest.SVFT_BINDING_TURNOVER_DTL_LIST.Compute("Sum(SUM_DISCOUNT)", String.Empty))
                Me._manifest.Label_TotalDiscount.Text = _
                    CommTK.FString(totalDiscount, _
                    False, _
                    "#,##0.00")

                Dim pointToRMBRate = CommTK.FDecimal(SysInfo.ReadShareSysInfo(MyPosXService.Decls.SVN_POINTS_TO_RMB_RATE))
                Dim rmbToPointRate = CommTK.FDecimal(SysInfo.ReadShareSysInfo(MyPosXService.Decls.SVN_RMB_TO_POINTS_RATE))

                Dim payable = CommTK.FDecimal(totalPrice - totalDiscount - Me._manifest.CalcEdit_ExtraDiscount.Value - Me._manifest.CalcEdit_UsePoint.Value * pointToRMBRate)

                Me._manifest.Label_Payable.Text = CommTK.FString(payable, False, "#,##0.00")
                If rmbToPointRate > 0 Then
                    Me._manifest.Label_AquiringPoints.Text = CommTK.FString(payable / rmbToPointRate, False, "#,##0.00")
                Else
                    Me._manifest.Label_AquiringPoints.Text = "0.00"
                End If
                'Dim servResult As String = _
                '    Me._service.ServUpdateSummary()

                'If servResult.Length > 0 Then
                '    Return servResult        
                'End If                       

            Catch ex As XL.Common.Utils.XLException

                Dim logContentBuilder As New LineStrBuilder
                logContentBuilder.AppendLine("Message: {0}", ex.Message)
                logContentBuilder.AppendLine("Stack Trace: {0}", ex.StackTrace)

                WinTK.OutputLog("XL Exception", logContentBuilder.ToString())

                Return ex.Message

            Catch ex As Exception

                Dim logContentBuilder As New LineStrBuilder
                logContentBuilder.AppendLine("Message: {0}", ex.Message)
                logContentBuilder.AppendLine("Stack Trace: {0}", ex.StackTrace)

                WinTK.OutputLog("Exception occured", logContentBuilder.ToString())

                XL.Win.Window.XLMessageBox.UseSmallFont = True
                Return ex.Message & vbNewLine & ex.StackTrace.ToString()

            End Try

            Return String.Empty

        End Function

        '''Function remark:
        '''
        '''
        '''-------------------------------------------------------------------
        Private Function DoLoadClientInfoByCode() As String


            Try

                Dim clientCondition As New MyPosXAuto.Facade.AfMV.ConditionOfMV_MP_CLIENT(XL.DB.Utils.ConditionBuilder.LogicOperators.Logic_And)
                clientCondition.Add(MyPosXAuto.Facade.AfMV.MV_MP_CLIENTColumns.CLIENT_CODEColumn, "=", Me._manifest.TextEdit_ClientCode.Text)
                Dim clientRow = MyPosXAuto.Facade.AfMV.GetMV_MP_CLIENTRow(clientCondition)

                If IsNothing(clientRow) = True Then
                    Me._manifest.ShowStatusMessage(StatusMessageIcon.Alert, MyPosXService.Decls.MSG_STATUS_0019)
                    WinTK.PlayWavSound("Error.WAV")
                    Return String.Empty
                End If

                Me._manifest.ButtonEdit_WareCode.Text = clientRow.CLIENT_CODE
                Me._manifest.Label_ClientID.Text = clientRow.CLIENT_ID
                Me._manifest.Label_ClientName.Text = clientRow.CLIENT_NAME
                Me._manifest.Label_HoldingPoint.Text = CommTK.FString(clientRow.CURRENT_POINT, False, "#,##0.00")

                'Dim servResult As String = _
                '    Me._service.ServLoadClientInfoByCode()

                'If servResult.Length > 0 Then
                '    Return servResult        
                'End If                       

            Catch ex As XL.Common.Utils.XLException

                Dim logContentBuilder As New LineStrBuilder
                logContentBuilder.AppendLine("Message: {0}", ex.Message)
                logContentBuilder.AppendLine("Stack Trace: {0}", ex.StackTrace)

                WinTK.OutputLog("XL Exception", logContentBuilder.ToString())

                Return ex.Message

            Catch ex As Exception

                Dim logContentBuilder As New LineStrBuilder
                logContentBuilder.AppendLine("Message: {0}", ex.Message)
                logContentBuilder.AppendLine("Stack Trace: {0}", ex.StackTrace)

                WinTK.OutputLog("Exception occured", logContentBuilder.ToString())

                XL.Win.Window.XLMessageBox.UseSmallFont = True
                Return ex.Message & vbNewLine & ex.StackTrace.ToString()

            End Try

            Return String.Empty

        End Function

        '''Function remark:
        '''
        '''
        '''-------------------------------------------------------------------
        Private Function DoUpdateChange() As String


            Try


                'Dim servResult As String = _
                '    Me._service.ServUpdateChange()

                'If servResult.Length > 0 Then
                '    Return servResult        
                'End If                       

            Catch ex As XL.Common.Utils.XLException

                Dim logContentBuilder As New LineStrBuilder
                logContentBuilder.AppendLine("Message: {0}", ex.Message)
                logContentBuilder.AppendLine("Stack Trace: {0}", ex.StackTrace)

                WinTK.OutputLog("XL Exception", logContentBuilder.ToString())

                Return ex.Message

            Catch ex As Exception

                Dim logContentBuilder As New LineStrBuilder
                logContentBuilder.AppendLine("Message: {0}", ex.Message)
                logContentBuilder.AppendLine("Stack Trace: {0}", ex.StackTrace)

                WinTK.OutputLog("Exception occured", logContentBuilder.ToString())

                XL.Win.Window.XLMessageBox.UseSmallFont = True
                Return ex.Message & vbNewLine & ex.StackTrace.ToString()

            End Try

            Return String.Empty

        End Function

        '''Function remark:
        '''
        '''
        '''-------------------------------------------------------------------
        Private Function DoUploadCacheData() As String


            Try

                MyPosXService.Facade.OpBizTurnover.ImportTurnoverCacheData( _
                    Me._manifest.SVFT_CACHE_DATA_TURNOVER_LIST, _
                    Me._manifest.SVFT_BINDING_TURNOVER_DTL_LIST)

                MyPosXService.Facade.OpBizTurnover.UpdateTurnoverPointsIO()

                Me._manifest.SVFT_CACHE_DATA_TURNOVER_LIST.Clear()
                Me._manifest.SVFT_BINDING_TURNOVER_DTL_LIST.Clear()

                Me._manifest.SVFT_CACHE_DATA_TURNOVER_LIST.SaveXml( _
                    WinTK.GetResourceFilePath( _
                        ResourceType.Data, _
                        Utils.Decls.CACHE_DATA_FILE_TURNOVER))
                Me._manifest.SVFT_CACHE_DATE_TURNOVER_DTL_LIST.SaveXml( _
                    WinTK.GetResourceFilePath( _
                        ResourceType.Data, _
                        Utils.Decls.CACHE_DATA_FILE_TURNOVER_DETAIL))


                'Dim servResult As String = _
                '    Me._service.ServUploadCacheData()

                'If servResult.Length > 0 Then
                '    Return servResult        
                'End If                       

            Catch ex As XL.Common.Utils.XLException

                Dim logContentBuilder As New LineStrBuilder
                logContentBuilder.AppendLine("Message: {0}", ex.Message)
                logContentBuilder.AppendLine("Stack Trace: {0}", ex.StackTrace)

                WinTK.OutputLog("XL Exception", logContentBuilder.ToString())

                Return ex.Message

            Catch ex As Exception

                Dim logContentBuilder As New LineStrBuilder
                logContentBuilder.AppendLine("Message: {0}", ex.Message)
                logContentBuilder.AppendLine("Stack Trace: {0}", ex.StackTrace)

                WinTK.OutputLog("Exception occured", logContentBuilder.ToString())

                XL.Win.Window.XLMessageBox.UseSmallFont = True
                Return ex.Message & vbNewLine & ex.StackTrace.ToString()

            End Try

            Return String.Empty

        End Function

        '''Function remark:
        '''
        '''
        '''-------------------------------------------------------------------
        Private Function DoPrintPurchaseList() As String


            Try

                Dim report As New Reports.R_02_01001

                report.DataSource = Me._manifest.SVFT_BINDING_TURNOVER_DTL_LIST

                If IsDBNull(Me._manifest.SV_RETURN_RELIEF_TURNOVER_ROW_SE) = False Then
                    report.XrLabel_ReturnTurnoverCode.Text = _
                        String.Format("退货抵冲:", Me._manifest.SV_RETURN_RELIEF_TURNOVER_ROW_SE.TURNOVER_CODE)
                End If

                Dim staffRow As MyPosXAuto.FTs.FT_M_STAFFRow = _
                    MyPosXAuto.Facade.AfBizMaster.GetM_STAFFRow(Utils.Decls.LOGIN_STAFF_ID)

                If IsNothing(staffRow) = True Then
                    Return String.Empty
                End If

                report.XrLabel_TurnoverCode.Text = Me._manifest.SV_PRINTING_TURNOVER_CODE
                report.XrLabel_BranchName.Text = Utils.Decls.CURRENT_POS_ROW.POS_NAME
                report.XrLabel_Operator.Text = String.Format(" <{0}> {1} ", _
                        staffRow.STAFF_CODE, _
                        staffRow.STAFF_NAME)

                report.XrLabel_TotalMoney.Text = CommTK.FString(Me._manifest.SVFT_BINDING_TURNOVER_DTL_LIST.Compute("Sum(SUM_PRICE)", String.Empty), False, "#,##0.00")

                report.CreateDataBindings()
                report.Print()

                'Dim servResult As String = _
                '    Me._service.ServPrintPurchaseList()

                'If servResult.Length > 0 Then
                '    Return servResult        
                'End If                       

            Catch ex As XL.Common.Utils.XLException

                Dim logContentBuilder As New LineStrBuilder
                logContentBuilder.AppendLine("Message: {0}", ex.Message)
                logContentBuilder.AppendLine("Stack Trace: {0}", ex.StackTrace)

                WinTK.OutputLog("XL Exception", logContentBuilder.ToString())

                Return ex.Message

            Catch ex As Exception

                Dim logContentBuilder As New LineStrBuilder
                logContentBuilder.AppendLine("Message: {0}", ex.Message)
                logContentBuilder.AppendLine("Stack Trace: {0}", ex.StackTrace)

                WinTK.OutputLog("Exception occured", logContentBuilder.ToString())

                XL.Win.Window.XLMessageBox.UseSmallFont = True
                Return ex.Message & vbNewLine & ex.StackTrace.ToString()

            End Try

            Return String.Empty

        End Function

        '''Function remark:
        '''
        '''
        '''-------------------------------------------------------------------
        Private Function DoLoadReturnReliefTurnover() As String


            Try
                If MyPosXService.Decls.IS_SYSTEM_ONLINE = False Then
                    Return MyPosXService.Decls.MSG_ALERT_00065
                End If

                Dim turnoverCondition As New MyPosXAuto.Facade.AfXV.ConditionOfXV_H_MP_TURNOVER(XL.DB.Utils.ConditionBuilder.LogicOperators.Logic_And)
                Me._manifest.SVFT_BINDING_TURNOVER_DTL_LIST.Clear()
                Dim turnoverDtlCondition As New MyPosXAuto.Facade.AfXV.ConditionOfXV_H_MP_TURNOVER_DTL(XL.DB.Utils.ConditionBuilder.LogicOperators.Logic_And)
                turnoverDtlCondition.Add(MyPosXAuto.Facade.AfXV.XV_H_MP_TURNOVER_DTLColumns.TURNOVER_IDColumn, "=", Me._manifest.SV_RETURN_RELIEF_TURNOVER_ROW_SE.TURNOVER_ID)

                turnoverCondition.Add(MyPosXAuto.Facade.AfXV.XV_H_MP_TURNOVERColumns.TURNOVER_IDColumn, "=", Me._manifest.SV_RETURN_RELIEF_TURNOVER_ROW_SE.TURNOVER_ID)

                MyPosXAuto.Facade.AfXV.FillFT_XV_H_MP_TURNOVER_DTL( _
                        turnoverDtlCondition, _
                        Me._manifest.SVFT_BINDING_TURNOVER_DTL_LIST)

                MyPosXAuto.Facade.AfBizTurnover.FillH_MP_TURNOVERRowSEntity(Me._manifest.SV_RETURN_RELIEF_TURNOVER_ROW_SE, Me._manifest.SV_RETURN_RELIEF_TURNOVER_ROW_SE.TURNOVER_ID)

                Me._manifest.CalcEdit_ExtraDiscount.Value = Me._manifest.SV_RETURN_RELIEF_TURNOVER_ROW_SE.EXTRA_DISCOUNT
                Me._manifest.CalcEdit_UsePoint.Value = Me._manifest.SV_RETURN_RELIEF_TURNOVER_ROW_SE.POINT_USE
                Me._manifest.Label_AquiringPoints.Text = CommTK.FString(Me._manifest.SV_RETURN_RELIEF_TURNOVER_ROW_SE.POINT_GAIN, False, "#,##0.00")

                'Else
                '    Dim cacheTurnoverRow = Me._manifest.SVFT_CACHE_DATA_TURNOVER_LIST.FindRowByCondition(turnoverCondition)
                '    Dim cacheTurnoverDtlRows = Me._manifest.SVFT_CACHE_DATE_TURNOVER_DTL_LIST.FindRowsByCondition(turnoverDtlCondition)
                '    Dim bindingRow As MyPosXAuto.FTs.FT_XV_H_MP_TURNOVER_DTLRow
                '    cacheTurnoverRow.FillSEntity(turnoverRowSEntity)
                '    For Each cacheTurnoverDtlRow As MyPosXAuto.FTs.FT_XV_H_MP_TURNOVER_DTLRow In cacheTurnoverDtlRows
                '        bindingRow = Me._manifest.SVFT_BINDING_TURNOVER_DTL_LIST.NewXV_H_MP_TURNOVER_DTLRow
                '        Me._manifest.SVFT_BINDING_TURNOVER_DTL_LIST.AddXV_H_MP_TURNOVER_DTLRow(bindingRow)
                '        bindingRow.CloneDataRow(cacheTurnoverDtlRow)
                '    Next


                For Each bindingRow As MyPosXAuto.FTs.FT_XV_H_MP_TURNOVER_DTLRow In Me._manifest.SVFT_BINDING_TURNOVER_DTL_LIST
                    bindingRow.ROW_REMARK = CommTK.FString(bindingRow.WARE_AMOUNT)
                    bindingRow.WARE_AMOUNT = 0
                Next

                Me._manifest.GridControl_TurnoverDtl.DataSource = Me._manifest.SVFT_BINDING_TURNOVER_DTL_LIST

                'Dim servResult As String = _
                '    Me._service.ServLoadReturnReliefTurnover()

                'If servResult.Length > 0 Then
                '    Return servResult        
                'End If                       

            Catch ex As XL.Common.Utils.XLException

                Dim logContentBuilder As New LineStrBuilder
                logContentBuilder.AppendLine("Message: {0}", ex.Message)
                logContentBuilder.AppendLine("Stack Trace: {0}", ex.StackTrace)

                WinTK.OutputLog("XL Exception", logContentBuilder.ToString())

                Return ex.Message

            Catch ex As Exception

                Dim logContentBuilder As New LineStrBuilder
                logContentBuilder.AppendLine("Message: {0}", ex.Message)
                logContentBuilder.AppendLine("Stack Trace: {0}", ex.StackTrace)

                WinTK.OutputLog("Exception occured", logContentBuilder.ToString())

                XL.Win.Window.XLMessageBox.UseSmallFont = True
                Return ex.Message & vbNewLine & ex.StackTrace.ToString()

            End Try

            Return String.Empty

        End Function

        '''Function remark:
        '''
        '''
        '''-------------------------------------------------------------------
        Private Function DoBizUtld0008() As String


            Try


                'Dim servResult As String = _
                '    Me._service.ServBizUtld0008()

                'If servResult.Length > 0 Then
                '    Return servResult        
                'End If                       

            Catch ex As XL.Common.Utils.XLException

                Dim logContentBuilder As New LineStrBuilder
                logContentBuilder.AppendLine("Message: {0}", ex.Message)
                logContentBuilder.AppendLine("Stack Trace: {0}", ex.StackTrace)

                WinTK.OutputLog("XL Exception", logContentBuilder.ToString())

                Return ex.Message

            Catch ex As Exception

                Dim logContentBuilder As New LineStrBuilder
                logContentBuilder.AppendLine("Message: {0}", ex.Message)
                logContentBuilder.AppendLine("Stack Trace: {0}", ex.StackTrace)

                WinTK.OutputLog("Exception occured", logContentBuilder.ToString())

                XL.Win.Window.XLMessageBox.UseSmallFont = True
                Return ex.Message & vbNewLine & ex.StackTrace.ToString()

            End Try

            Return String.Empty

        End Function

        '''Function remark:
        '''
        '''
        '''-------------------------------------------------------------------
        Private Function DoBizUtld0009() As String


            Try


                'Dim servResult As String = _
                '    Me._service.ServBizUtld0009()

                'If servResult.Length > 0 Then
                '    Return servResult        
                'End If                       

            Catch ex As XL.Common.Utils.XLException

                Dim logContentBuilder As New LineStrBuilder
                logContentBuilder.AppendLine("Message: {0}", ex.Message)
                logContentBuilder.AppendLine("Stack Trace: {0}", ex.StackTrace)

                WinTK.OutputLog("XL Exception", logContentBuilder.ToString())

                Return ex.Message

            Catch ex As Exception

                Dim logContentBuilder As New LineStrBuilder
                logContentBuilder.AppendLine("Message: {0}", ex.Message)
                logContentBuilder.AppendLine("Stack Trace: {0}", ex.StackTrace)

                WinTK.OutputLog("Exception occured", logContentBuilder.ToString())

                XL.Win.Window.XLMessageBox.UseSmallFont = True
                Return ex.Message & vbNewLine & ex.StackTrace.ToString()

            End Try

            Return String.Empty

        End Function

        '''Function remark:
        '''
        '''
        '''-------------------------------------------------------------------
        Private Function DoBizUtld0010() As String


            Try


                'Dim servResult As String = _
                '    Me._service.ServBizUtld0010()

                'If servResult.Length > 0 Then
                '    Return servResult        
                'End If                       

            Catch ex As XL.Common.Utils.XLException

                Dim logContentBuilder As New LineStrBuilder
                logContentBuilder.AppendLine("Message: {0}", ex.Message)
                logContentBuilder.AppendLine("Stack Trace: {0}", ex.StackTrace)

                WinTK.OutputLog("XL Exception", logContentBuilder.ToString())

                Return ex.Message

            Catch ex As Exception

                Dim logContentBuilder As New LineStrBuilder
                logContentBuilder.AppendLine("Message: {0}", ex.Message)
                logContentBuilder.AppendLine("Stack Trace: {0}", ex.StackTrace)

                WinTK.OutputLog("Exception occured", logContentBuilder.ToString())

                XL.Win.Window.XLMessageBox.UseSmallFont = True
                Return ex.Message & vbNewLine & ex.StackTrace.ToString()

            End Try

            Return String.Empty

        End Function

        '''Function remark:
        '''
        '''
        '''-------------------------------------------------------------------
        Private Function DoBizUtld0011() As String


            Try


                'Dim servResult As String = _
                '    Me._service.ServBizUtld0011()

                'If servResult.Length > 0 Then
                '    Return servResult        
                'End If                       

            Catch ex As XL.Common.Utils.XLException

                Dim logContentBuilder As New LineStrBuilder
                logContentBuilder.AppendLine("Message: {0}", ex.Message)
                logContentBuilder.AppendLine("Stack Trace: {0}", ex.StackTrace)

                WinTK.OutputLog("XL Exception", logContentBuilder.ToString())

                Return ex.Message

            Catch ex As Exception

                Dim logContentBuilder As New LineStrBuilder
                logContentBuilder.AppendLine("Message: {0}", ex.Message)
                logContentBuilder.AppendLine("Stack Trace: {0}", ex.StackTrace)

                WinTK.OutputLog("Exception occured", logContentBuilder.ToString())

                XL.Win.Window.XLMessageBox.UseSmallFont = True
                Return ex.Message & vbNewLine & ex.StackTrace.ToString()

            End Try

            Return String.Empty

        End Function

        '''Function remark:
        '''
        '''
        '''-------------------------------------------------------------------
        Private Function DoBizUtld0012() As String


            Try


                'Dim servResult As String = _
                '    Me._service.ServBizUtld0012()

                'If servResult.Length > 0 Then
                '    Return servResult        
                'End If                       

            Catch ex As XL.Common.Utils.XLException

                Dim logContentBuilder As New LineStrBuilder
                logContentBuilder.AppendLine("Message: {0}", ex.Message)
                logContentBuilder.AppendLine("Stack Trace: {0}", ex.StackTrace)

                WinTK.OutputLog("XL Exception", logContentBuilder.ToString())

                Return ex.Message

            Catch ex As Exception

                Dim logContentBuilder As New LineStrBuilder
                logContentBuilder.AppendLine("Message: {0}", ex.Message)
                logContentBuilder.AppendLine("Stack Trace: {0}", ex.StackTrace)

                WinTK.OutputLog("Exception occured", logContentBuilder.ToString())

                XL.Win.Window.XLMessageBox.UseSmallFont = True
                Return ex.Message & vbNewLine & ex.StackTrace.ToString()

            End Try

            Return String.Empty

        End Function

        '''Function remark:
        '''
        '''
        '''-------------------------------------------------------------------
        Private Function DoBizUtld0013() As String


            Try


                'Dim servResult As String = _
                '    Me._service.ServBizUtld0013()

                'If servResult.Length > 0 Then
                '    Return servResult        
                'End If                       

            Catch ex As XL.Common.Utils.XLException

                Dim logContentBuilder As New LineStrBuilder
                logContentBuilder.AppendLine("Message: {0}", ex.Message)
                logContentBuilder.AppendLine("Stack Trace: {0}", ex.StackTrace)

                WinTK.OutputLog("XL Exception", logContentBuilder.ToString())

                Return ex.Message

            Catch ex As Exception

                Dim logContentBuilder As New LineStrBuilder
                logContentBuilder.AppendLine("Message: {0}", ex.Message)
                logContentBuilder.AppendLine("Stack Trace: {0}", ex.StackTrace)

                WinTK.OutputLog("Exception occured", logContentBuilder.ToString())

                XL.Win.Window.XLMessageBox.UseSmallFont = True
                Return ex.Message & vbNewLine & ex.StackTrace.ToString()

            End Try

            Return String.Empty

        End Function

        '''Function remark:
        '''
        '''
        '''-------------------------------------------------------------------
        Private Function DoBizUtld0014() As String


            Try


                'Dim servResult As String = _
                '    Me._service.ServBizUtld0014()

                'If servResult.Length > 0 Then
                '    Return servResult        
                'End If                       

            Catch ex As XL.Common.Utils.XLException

                Dim logContentBuilder As New LineStrBuilder
                logContentBuilder.AppendLine("Message: {0}", ex.Message)
                logContentBuilder.AppendLine("Stack Trace: {0}", ex.StackTrace)

                WinTK.OutputLog("XL Exception", logContentBuilder.ToString())

                Return ex.Message

            Catch ex As Exception

                Dim logContentBuilder As New LineStrBuilder
                logContentBuilder.AppendLine("Message: {0}", ex.Message)
                logContentBuilder.AppendLine("Stack Trace: {0}", ex.StackTrace)

                WinTK.OutputLog("Exception occured", logContentBuilder.ToString())

                XL.Win.Window.XLMessageBox.UseSmallFont = True
                Return ex.Message & vbNewLine & ex.StackTrace.ToString()

            End Try

            Return String.Empty

        End Function

        '''Function remark:
        '''
        '''
        '''-------------------------------------------------------------------
        Private Function DoBizUtld0015() As String


            Try


                'Dim servResult As String = _
                '    Me._service.ServBizUtld0015()

                'If servResult.Length > 0 Then
                '    Return servResult        
                'End If                       

            Catch ex As XL.Common.Utils.XLException

                Dim logContentBuilder As New LineStrBuilder
                logContentBuilder.AppendLine("Message: {0}", ex.Message)
                logContentBuilder.AppendLine("Stack Trace: {0}", ex.StackTrace)

                WinTK.OutputLog("XL Exception", logContentBuilder.ToString())

                Return ex.Message

            Catch ex As Exception

                Dim logContentBuilder As New LineStrBuilder
                logContentBuilder.AppendLine("Message: {0}", ex.Message)
                logContentBuilder.AppendLine("Stack Trace: {0}", ex.StackTrace)

                WinTK.OutputLog("Exception occured", logContentBuilder.ToString())

                XL.Win.Window.XLMessageBox.UseSmallFont = True
                Return ex.Message & vbNewLine & ex.StackTrace.ToString()

            End Try

            Return String.Empty

        End Function

        '''Function remark:
        '''
        '''
        '''-------------------------------------------------------------------
        Private Function DoBizUtld0016() As String


            Try


                'Dim servResult As String = _
                '    Me._service.ServBizUtld0016()

                'If servResult.Length > 0 Then
                '    Return servResult        
                'End If                       

            Catch ex As XL.Common.Utils.XLException

                Dim logContentBuilder As New LineStrBuilder
                logContentBuilder.AppendLine("Message: {0}", ex.Message)
                logContentBuilder.AppendLine("Stack Trace: {0}", ex.StackTrace)

                WinTK.OutputLog("XL Exception", logContentBuilder.ToString())

                Return ex.Message

            Catch ex As Exception

                Dim logContentBuilder As New LineStrBuilder
                logContentBuilder.AppendLine("Message: {0}", ex.Message)
                logContentBuilder.AppendLine("Stack Trace: {0}", ex.StackTrace)

                WinTK.OutputLog("Exception occured", logContentBuilder.ToString())

                XL.Win.Window.XLMessageBox.UseSmallFont = True
                Return ex.Message & vbNewLine & ex.StackTrace.ToString()

            End Try

            Return String.Empty

        End Function

        '''Function remark:
        '''
        '''
        '''-------------------------------------------------------------------
        Private Function DoBizUtld0017() As String


            Try


                'Dim servResult As String = _
                '    Me._service.ServBizUtld0017()

                'If servResult.Length > 0 Then
                '    Return servResult        
                'End If                       

            Catch ex As XL.Common.Utils.XLException

                Dim logContentBuilder As New LineStrBuilder
                logContentBuilder.AppendLine("Message: {0}", ex.Message)
                logContentBuilder.AppendLine("Stack Trace: {0}", ex.StackTrace)

                WinTK.OutputLog("XL Exception", logContentBuilder.ToString())

                Return ex.Message

            Catch ex As Exception

                Dim logContentBuilder As New LineStrBuilder
                logContentBuilder.AppendLine("Message: {0}", ex.Message)
                logContentBuilder.AppendLine("Stack Trace: {0}", ex.StackTrace)

                WinTK.OutputLog("Exception occured", logContentBuilder.ToString())

                XL.Win.Window.XLMessageBox.UseSmallFont = True
                Return ex.Message & vbNewLine & ex.StackTrace.ToString()

            End Try

            Return String.Empty

        End Function

        '''Function remark:
        '''
        '''
        '''-------------------------------------------------------------------
        Private Function DoBizUtld0018() As String


            Try


                'Dim servResult As String = _
                '    Me._service.ServBizUtld0018()

                'If servResult.Length > 0 Then
                '    Return servResult        
                'End If                       

            Catch ex As XL.Common.Utils.XLException

                Dim logContentBuilder As New LineStrBuilder
                logContentBuilder.AppendLine("Message: {0}", ex.Message)
                logContentBuilder.AppendLine("Stack Trace: {0}", ex.StackTrace)

                WinTK.OutputLog("XL Exception", logContentBuilder.ToString())

                Return ex.Message

            Catch ex As Exception

                Dim logContentBuilder As New LineStrBuilder
                logContentBuilder.AppendLine("Message: {0}", ex.Message)
                logContentBuilder.AppendLine("Stack Trace: {0}", ex.StackTrace)

                WinTK.OutputLog("Exception occured", logContentBuilder.ToString())

                XL.Win.Window.XLMessageBox.UseSmallFont = True
                Return ex.Message & vbNewLine & ex.StackTrace.ToString()

            End Try

            Return String.Empty

        End Function

        '''Function remark:
        '''
        '''
        '''-------------------------------------------------------------------
        Private Function DoBizUtld0019() As String


            Try


                'Dim servResult As String = _
                '    Me._service.ServBizUtld0019()

                'If servResult.Length > 0 Then
                '    Return servResult        
                'End If                       

            Catch ex As XL.Common.Utils.XLException

                Dim logContentBuilder As New LineStrBuilder
                logContentBuilder.AppendLine("Message: {0}", ex.Message)
                logContentBuilder.AppendLine("Stack Trace: {0}", ex.StackTrace)

                WinTK.OutputLog("XL Exception", logContentBuilder.ToString())

                Return ex.Message

            Catch ex As Exception

                Dim logContentBuilder As New LineStrBuilder
                logContentBuilder.AppendLine("Message: {0}", ex.Message)
                logContentBuilder.AppendLine("Stack Trace: {0}", ex.StackTrace)

                WinTK.OutputLog("Exception occured", logContentBuilder.ToString())

                XL.Win.Window.XLMessageBox.UseSmallFont = True
                Return ex.Message & vbNewLine & ex.StackTrace.ToString()

            End Try

            Return String.Empty

        End Function

        '''Function remark:
        '''
        '''
        '''-------------------------------------------------------------------
        Private Function DoBizUtld0020() As String


            Try


                'Dim servResult As String = _
                '    Me._service.ServBizUtld0020()

                'If servResult.Length > 0 Then
                '    Return servResult        
                'End If                       

            Catch ex As XL.Common.Utils.XLException

                Dim logContentBuilder As New LineStrBuilder
                logContentBuilder.AppendLine("Message: {0}", ex.Message)
                logContentBuilder.AppendLine("Stack Trace: {0}", ex.StackTrace)

                WinTK.OutputLog("XL Exception", logContentBuilder.ToString())

                Return ex.Message

            Catch ex As Exception

                Dim logContentBuilder As New LineStrBuilder
                logContentBuilder.AppendLine("Message: {0}", ex.Message)
                logContentBuilder.AppendLine("Stack Trace: {0}", ex.StackTrace)

                WinTK.OutputLog("Exception occured", logContentBuilder.ToString())

                XL.Win.Window.XLMessageBox.UseSmallFont = True
                Return ex.Message & vbNewLine & ex.StackTrace.ToString()

            End Try

            Return String.Empty

        End Function

#End Region


    End Class

End Namespace




'Code Samples Below ------------------------

''''Function remark:                                                                                                            
''''                                                                                                                            
''''                                                                                                                            
''''-------------------------------------------------------------------                                                         
'Private Function DoLoadXXXByCode() As String                                                                                   
'                                                                                                                               
'                                                                                                                               
'    Try                                                                                                                        
'        If Me._manifest.ButtonEdit_XXXCode.Text.Trim.Length = 0 Then                                                           
'            Return String.Empty                                                                                                
'        End If                                                                                                                 
'                                                                                                                               
'        Dim SSCondition As New MyPosXAuto.Facade.AfBizMaster.ConditionOfM_SSS(XL.DB.Utils.ConditionBuilder.LogicOperators.Logic_And)
'        SSCondition.Add(XAuto.Facade.AfBizMaster.M_SSSColumns.SS_CODEColumn, "=", Me._manifest.ButtonEdit_XXXCode.Text)      
'                                                                                                                               
'        Dim SSRow As XAuto.FTs.FT_M_SSSRow = _                                                                                 
'            XAuto.Facade.AfBizMaster.GetM_SSSRow(SSCondition)                                                                  
'                                                                                                                               
'        If IsNothing(SSRow) = True Then                                                                                        
'            Return MyPosXService.Decls.MSG_ALERT_00001                                                                              
'        End If                                                                                                                 
'                                                                                                                               
'        Me._manifest.ButtonEdit_XXXCode.Text = SSRow.SS_CODE                                                                   
'        Me._manifest.Label_XXXName.Text = SSRow.SS_NAME                                                                        
'        Me._manifest.Label_XXXID.Text = CommTK.FString(SSRow.SS_ID)                                                            
'                                                                                                                               
'        'Dim servResult As String = _                                                                                          
'        '    Me._service.ServLoadXXXByCode()                                                                                   
'                                                                                                                               
'        'If servResult.Length > 0 Then                                                                                         
'        '    Return servResult                                                                                                 
'        'End If                                                                                                                
'                                                                                                                               
'    Catch ex As XL.Common.Utils.XLException                                                                                    
'                                                                                                                               
'        Dim logContentBuilder As New LineStrBuilder                                                                            
'        logContentBuilder.AppendLine("Message: {0}", ex.Message)                                                           
'        logContentBuilder.AppendLine("Stack Trace: {0}", ex.StackTrace)                                                    
'                                                                                                                               
'        WinTK.OutputLog("XL Exception", logContentBuilder.ToString())                                                        
'                                                                                                                               
'        Return ex.Message                                                                                                      
'                                                                                                                               
'    Catch ex As Exception                                                                                                      
'                                                                                                                               
'        Dim logContentBuilder As New LineStrBuilder                                                                            
'        logContentBuilder.AppendLine("Message: {0}", ex.Message)                                                           
'        logContentBuilder.AppendLine("Stack Trace: {0}", ex.StackTrace)                                                    
'                                                                                                                               
'        WinTK.OutputLog("Exception occured", logContentBuilder.ToString())                                                   
'                                                                                                                               
'        XL.Win.Window.XLMessageBox.UseSmallFont = True                                                                         
'        Return ex.Message & vbNewLine & ex.StackTrace.ToString()                                                               
'                                                                                                                               
'    End Try                                                                                                                    
'                                                                                                                               
'    Return String.Empty                                                                                                        
'                                                                                                                               
'End Function                                                                                                                   


